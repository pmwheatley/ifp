diff -Naur frotz/glkmisc.c frotz_new/glkmisc.c
--- frotz/glkmisc.c	2006-09-08 22:58:30.000000000 -0700
+++ frotz_new/glkmisc.c	2007-08-27 19:06:16.000000000 -0700
@@ -171,6 +171,8 @@
 
 
 	gos_lower = glk_window_open(0, 0, 0, wintype_TextGrid, 0);
+	if (!gos_lower)
+		gos_lower = glk_window_open(0, 0, 0, wintype_TextBuffer, 0);
 	glk_window_get_size(gos_lower, &width, &height);
 	glk_window_close(gos_lower, NULL);
 
@@ -192,9 +194,12 @@
 	if (h_version == V3 && user_tandy_bit)
 		h_config |= CONFIG_TANDY;
 
-	if (h_version == V3)
+	if (h_version == V3 && gos_upper)
 		h_config |= CONFIG_SPLITSCREEN;
 
+	if (h_version == V3 && !gos_upper)
+		h_config |= CONFIG_NOSTATUSLINE;
+
 	if (h_version >= V4)
 		h_config |= CONFIG_BOLDFACE | CONFIG_EMPHASIS |
 			CONFIG_FIXED | CONFIG_TIMEDINPUT;
@@ -297,11 +302,12 @@
 zchar os_read_key (int timeout, bool show_cursor)
 {
 	event_t ev;
+	winid_t win = gos_curwin ? gos_curwin : gos_lower;
 
 	if (gos_linepending)
 		gos_cancel_pending_line();
 
-	glk_request_char_event(gos_curwin);
+	glk_request_char_event(win);
 	if (timeout != 0)
 		glk_request_timer_events(timeout * 100);
 
@@ -312,7 +318,7 @@
 			gos_update_width();
 		else if (ev.type == evtype_Timer)
 		{
-			glk_cancel_char_event(gos_curwin);
+			glk_cancel_char_event(win);
 			glk_request_timer_events(0);
 			return ZC_TIME_OUT;
 		}
@@ -322,7 +328,7 @@
 
 	glk_request_timer_events(0);
 
-	if (mach_status_ht < curr_status_ht)
+	if (gos_upper && mach_status_ht < curr_status_ht)
 		reset_status_ht();
 	curr_status_ht = 0;
 
@@ -346,13 +352,14 @@
 zchar os_read_line (int max, zchar *buf, int timeout, int width, int continued)
 {
 	event_t ev;
+	winid_t win = gos_curwin ? gos_curwin : gos_lower;
 
 	if (!continued && gos_linepending)
 		gos_cancel_pending_line(); 
 
 	if (!continued || !gos_linepending)
 	{
-		glk_request_line_event(gos_curwin, buf, max - 1, strlen(buf));
+		glk_request_line_event(win, buf, max - 1, strlen(buf));
 		if (timeout != 0)
 			glk_request_timer_events(timeout * 100);
 	}
@@ -366,7 +373,7 @@
 			gos_update_width();
 		else if (ev.type == evtype_Timer)
 		{
-			gos_linewin = gos_curwin;
+			gos_linewin = win;
 			gos_linepending = 1;
 			gos_linebuf = buf;
 			return ZC_TIME_OUT;
@@ -378,7 +385,7 @@
 	glk_request_timer_events(0);
 	buf[ev.val1] = '\0';
 
-	if (mach_status_ht < curr_status_ht)
+	if (gos_upper && mach_status_ht < curr_status_ht)
 		reset_status_ht();
 	curr_status_ht = 0;
 
diff -Naur frotz/glkscreen.c frotz_new/glkscreen.c
--- frotz/glkscreen.c	2006-09-08 22:58:30.000000000 -0700
+++ frotz_new/glkscreen.c	2007-08-27 19:06:54.000000000 -0700
@@ -129,17 +129,23 @@
 
 void reset_status_ht(void)
 {
+	glui32 height;
 	if (gos_upper)
-		glk_window_set_arrangement(glk_window_get_parent(gos_upper),
-			winmethod_Above | winmethod_Fixed,
-			mach_status_ht, NULL);
+	{
+		glk_window_get_size(gos_upper, NULL, &height);
+		if (mach_status_ht != height)
+			glk_window_set_arrangement(
+				glk_window_get_parent(gos_upper),
+				winmethod_Above | winmethod_Fixed,
+				mach_status_ht, NULL);
+	}
 }
 
 void erase_window (int w)
 {
 	if (w == 0)
 		glk_window_clear(gos_lower);
-	else
+	else if (gos_upper)
 	{
 		memset(statusline, ' ', sizeof statusline);
 		glk_window_clear(gos_upper);
@@ -150,15 +156,23 @@
 
 void split_window (int lines)
 {
+	if (!gos_upper)
+		return;
+
 	/* The top line is always set for V1 to V3 games */
 	if (h_version < V4)
 		lines++;
 
 	if (lines > curr_status_ht)
 	{
-		glk_window_set_arrangement(glk_window_get_parent(gos_upper),
-			winmethod_Above | winmethod_Fixed,
-			lines, NULL);
+		glui32 height;
+
+		glk_window_get_size(gos_upper, NULL, &height);
+		if (lines != height)
+			glk_window_set_arrangement(
+				glk_window_get_parent(gos_upper),
+				winmethod_Above | winmethod_Fixed,
+				lines, NULL);
 		curr_status_ht = lines;
 	}
 	mach_status_ht = lines;
@@ -168,6 +182,9 @@
 		curx = cury = 1;
 	}
 	gos_update_width();
+
+	if (h_version == V3)
+		glk_window_clear(gos_upper);
 }
 
 void restart_screen (void)
@@ -266,7 +283,7 @@
 			return;
 	}
 
-	if (gos_curwin == gos_upper) {
+	if (gos_upper && gos_curwin == gos_upper) {
 		if (cury > mach_status_ht) {
 			mach_status_ht = cury;
 			reset_status_ht();
@@ -286,7 +303,7 @@
 		}
 	}
 
-	if (gos_curwin == gos_upper)
+	if (gos_upper && gos_curwin == gos_upper)
 	{
 		if (c == '\n') {
 			glk_put_char(c);
@@ -315,7 +332,7 @@
 			}
 		}
 	}
-	else
+	else if (gos_curwin == gos_lower)
 	{
 		glk_put_char(c);
 	}
@@ -382,7 +399,7 @@
 {
 	int i;
 
-	if (gos_curwin == gos_upper)
+	if (gos_upper && gos_curwin == gos_upper)
 	{
 		for (i = 0; i < h_screen_cols + 1 - curx; i++)
 			glk_put_char(' ');
@@ -402,18 +419,20 @@
 	short w = zargs[0];
 	if (w == -2)
 	{
-		glk_window_clear(gos_upper);
+		if (gos_upper)
+			glk_window_clear(gos_upper);
 		glk_window_clear(gos_lower);
 	}
 	if (w == -1)
 	{
-		glk_window_clear(gos_upper);
+		if (gos_upper)
+			glk_window_clear(gos_upper);
 		glk_window_clear(gos_lower);
 		split_window(0);
 	}
 	if (w == 0)
 		glk_window_clear(gos_lower);
-	if (w == 1)
+	if (w == 1 && gos_upper)
 		glk_window_clear(gos_upper);
 }
 
@@ -515,7 +534,8 @@
 {
 	cury = zargs[0];
 	curx = zargs[1];
-	glk_window_move_cursor(gos_upper, curx - 1, cury - 1);
+	if (gos_upper)
+		glk_window_move_cursor(gos_upper, curx - 1, cury - 1);
 }
 
 /*
@@ -543,7 +563,10 @@
 		return;
 
 	if (gos_curwin == gos_upper && style & REVERSE_STYLE)
-		glk_set_style(style_User1);
+	{
+		if (gos_upper)
+			glk_set_style(style_User1);
+	}
 	else if (style & FIXED_WIDTH_STYLE)
 		glk_set_style(style_Preformatted);
 	else if (style & BOLDFACE_STYLE && style & EMPHASIS_STYLE)
@@ -580,7 +603,8 @@
 	}
 	else
 	{
-		glk_set_window(gos_upper);
+		if (gos_upper)
+			glk_set_window(gos_upper);
 		gos_curwin = gos_upper;
 		curstyle = upperstyle;
 	}
@@ -615,6 +639,9 @@
 
 	bool brief = FALSE;
 
+	if (!gos_upper)
+		return;
+
 	/* One V5 game (Wishbringer Solid Gold) contains this opcode by
 	   accident, so just return if the version number does not fit */
 
diff -Naur frotz/main.c frotz_new/main.c
--- frotz/main.c	2006-09-10 14:16:36.000000000 -0700
+++ frotz_new/main.c	2007-08-27 19:05:00.000000000 -0700
@@ -193,11 +193,6 @@
 {
 	myargc = data->argc;
 	myargv = data->argv;
-    return TRUE;
-}
-
-void glk_main (void)
-{
     os_init_setup ();
     os_process_arguments (myargc, myargv);
 
@@ -211,6 +206,11 @@
 
     init_undo ();
     z_restart ();
+    return TRUE;
+}
+
+void glk_main (void)
+{
     interpret ();
     reset_memory ();
 }
