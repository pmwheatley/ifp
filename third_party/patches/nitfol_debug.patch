diff -Naur nitfol/nitfol-0.5/inform.c nitfol_new/nitfol-0.5/inform.c
--- nitfol/nitfol-0.5/inform.c	Sun Oct 24 17:37:24 1999
+++ nitfol_new/nitfol-0.5/inform.c	Sat Mar  1 23:04:10 2003
@@ -1,95 +1,94 @@
-
-/*  A Bison parser, made from inform.y
-    by GNU Bison version 1.28  */
+/* A Bison parser, made from inform.y
+   by GNU bison 1.35.  */
 
 #define YYBISON 1  /* Identify Bison output.  */
 
-#define	NUM	257
-#define	DFILE	258
-#define	CONDITION	259
-#define	ALIAS	260
-#define	RALIAS	261
-#define	UNALIAS	262
-#define	DUMPMEM	263
-#define	AUTOMAP	264
-#define	HELP	265
-#define	UNDO	266
-#define	REDO	267
-#define	LANGUAGE	268
-#define	INFOSOURCE	269
-#define	INFOSOURCES	270
-#define	COPYING	271
-#define	WARRANTY	272
-#define	PRINT	273
-#define	SET	274
-#define	MOVE	275
-#define	TO	276
-#define	GIVE	277
-#define	REMOVE	278
-#define	JUMP	279
-#define	CONT	280
-#define	STEP	281
-#define	NEXT	282
-#define	UNTIL	283
-#define	STEPI	284
-#define	NEXTI	285
-#define	FINISH	286
-#define	BREAK	287
-#define	DELETE	288
-#define	IF	289
-#define	COND	290
-#define	IGNORE	291
-#define	BREAKPOINTS	292
-#define	RESTORE	293
-#define	RESTART	294
-#define	QUIT	295
-#define	RECORDON	296
-#define	RECORDOFF	297
-#define	REPLAY	298
-#define	REPLAYOFF	299
-#define	SYMBOL_FILE	300
-#define	FRAME	301
-#define	SELECT_FRAME	302
-#define	BACKTRACE	303
-#define	UP_FRAME	304
-#define	DOWN_FRAME	305
-#define	UP_SILENTLY	306
-#define	DOWN_SILENTLY	307
-#define	DISPLAY	308
-#define	UNDISPLAY	309
-#define	DISABLE_DISPLAY	310
-#define	ENABLE_DISPLAY	311
-#define	DISABLE_BREAK	312
-#define	ENABLE_BREAK	313
-#define	OBJECT_TREE	314
-#define	FIND	315
-#define	LIST_GLOBALS	316
-#define	BTRUE	317
-#define	BFALSE	318
-#define	NOTHING	319
-#define	PARENT	320
-#define	CHILD	321
-#define	SIBLING	322
-#define	CHILDREN	323
-#define	RANDOM	324
-#define	ANDAND	325
-#define	OROR	326
-#define	NOTNOT	327
-#define	OR	328
-#define	BYTEARRAY	329
-#define	WORDARRAY	330
-#define	precNEG	331
-#define	NUMBER	332
-#define	OBJECT	333
-#define	ROUTINE	334
-#define	STRING	335
-#define	GLOBAL	336
-#define	LOCAL	337
-#define	INCREMENT	338
-#define	DECREMENT	339
-#define	PROPADDR	340
-#define	PROPLENGTH	341
-#define	SUPERCLASS	342
+# define	NUM	257
+# define	DFILE	258
+# define	CONDITION	259
+# define	ALIAS	260
+# define	RALIAS	261
+# define	UNALIAS	262
+# define	DUMPMEM	263
+# define	AUTOMAP	264
+# define	HELP	265
+# define	UNDO	266
+# define	REDO	267
+# define	LANGUAGE	268
+# define	INFOSOURCE	269
+# define	INFOSOURCES	270
+# define	COPYING	271
+# define	WARRANTY	272
+# define	PRINT	273
+# define	SET	274
+# define	MOVE	275
+# define	TO	276
+# define	GIVE	277
+# define	REMOVE	278
+# define	JUMP	279
+# define	CONT	280
+# define	STEP	281
+# define	NEXT	282
+# define	UNTIL	283
+# define	STEPI	284
+# define	NEXTI	285
+# define	FINISH	286
+# define	BREAK	287
+# define	DELETE	288
+# define	IF	289
+# define	COND	290
+# define	IGNORE	291
+# define	BREAKPOINTS	292
+# define	RESTORE	293
+# define	RESTART	294
+# define	QUIT	295
+# define	RECORDON	296
+# define	RECORDOFF	297
+# define	REPLAY	298
+# define	REPLAYOFF	299
+# define	SYMBOL_FILE	300
+# define	FRAME	301
+# define	SELECT_FRAME	302
+# define	BACKTRACE	303
+# define	UP_FRAME	304
+# define	DOWN_FRAME	305
+# define	UP_SILENTLY	306
+# define	DOWN_SILENTLY	307
+# define	DISPLAY	308
+# define	UNDISPLAY	309
+# define	DISABLE_DISPLAY	310
+# define	ENABLE_DISPLAY	311
+# define	DISABLE_BREAK	312
+# define	ENABLE_BREAK	313
+# define	OBJECT_TREE	314
+# define	FIND	315
+# define	LIST_GLOBALS	316
+# define	BTRUE	317
+# define	BFALSE	318
+# define	NOTHING	319
+# define	PARENT	320
+# define	CHILD	321
+# define	SIBLING	322
+# define	CHILDREN	323
+# define	RANDOM	324
+# define	ANDAND	325
+# define	OROR	326
+# define	NOTNOT	327
+# define	OR	328
+# define	BYTEARRAY	329
+# define	WORDARRAY	330
+# define	precNEG	331
+# define	NUMBER	332
+# define	OBJECT	333
+# define	ROUTINE	334
+# define	STRING	335
+# define	GLOBAL	336
+# define	LOCAL	337
+# define	INCREMENT	338
+# define	DECREMENT	339
+# define	PROPADDR	340
+# define	PROPLENGTH	341
+# define	SUPERCLASS	342
 
 #line 1 "inform.y"
 
@@ -175,6 +174,7 @@
 
 
 #line 84 "inform.y"
+#ifndef YYSTYPE
 typedef union {
   glui32 pcoffset;
   infix_file *filenum;
@@ -188,13 +188,12 @@
   } cond;
 
   BOOL flag;
-} YYSTYPE;
-#include <stdio.h>
-
-#ifndef __cplusplus
-#ifndef __STDC__
-#define const
+} yystype;
+# define YYSTYPE yystype
+# define YYSTYPE_IS_TRIVIAL 1
 #endif
+#ifndef YYDEBUG
+# define YYDEBUG 0
 #endif
 
 
@@ -203,317 +202,350 @@
 #define	YYFLAG		-32768
 #define	YYNTBASE	104
 
+/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
 #define YYTRANSLATE(x) ((unsigned)(x) <= 342 ? yytranslate[x] : 114)
 
-static const char yytranslate[] = {     0,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,   101,     2,    81,    82,     2,    98,
-   103,    79,    77,    71,    78,    99,    80,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,   102,     2,     2,
-    72,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,    83,     2,    84,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
-     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
-    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
-    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
-    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
-    67,    68,    69,    70,    73,    74,    75,    76,    85,    86,
-    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
-    97,   100
+/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
+static const char yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,   101,     2,    81,    82,     2,
+      98,   103,    79,    77,    71,    78,    99,    80,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,   102,     2,
+       2,    72,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,    83,     2,    84,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
+       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
+      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,    68,    69,    70,    73,    74,    75,    76,    85,
+      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
+      96,    97,   100
 };
 
-#if YYDEBUG != 0
-static const short yyprhs[] = {     0,
-     0,     1,     3,     5,     7,     9,    11,    13,    15,    17,
-    19,    21,    23,    25,    27,    29,    31,    33,    35,    38,
-    41,    43,    46,    49,    52,    57,    59,    62,    64,    66,
-    69,    73,    78,    81,    84,    86,    89,    91,    94,    96,
-    99,   101,   103,   106,   108,   111,   113,   116,   120,   123,
-   127,   130,   132,   135,   138,   141,   143,   145,   147,   149,
-   151,   153,   156,   159,   161,   164,   166,   169,   171,   174,
-   176,   179,   181,   184,   188,   190,   193,   196,   200,   203,
-   205,   209,   210,   214,   216,   218,   222,   226,   227,   232,
-   234,   236,   238,   240,   244,   249,   254,   259,   264,   269,
-   274,   275,   280,   281,   286,   289,   293,   297,   301,   305,
-   309,   313,   317,   320,   324,   328,   331,   334,   337,   340,
-   343,   347,   351,   355,   358,   361,   364,   367,   370,   373
+#if YYDEBUG
+static const short yyprhs[] =
+{
+       0,     0,     1,     3,     5,     7,     9,    11,    13,    15,
+      17,    19,    21,    23,    25,    27,    29,    31,    33,    35,
+      38,    41,    43,    46,    49,    52,    57,    59,    62,    64,
+      66,    69,    73,    78,    81,    84,    86,    89,    91,    94,
+      96,    99,   101,   103,   106,   108,   111,   113,   116,   120,
+     123,   127,   130,   132,   135,   138,   141,   143,   145,   147,
+     149,   151,   153,   156,   159,   161,   164,   166,   169,   171,
+     174,   176,   179,   181,   184,   188,   190,   193,   196,   200,
+     203,   205,   209,   210,   214,   216,   218,   222,   226,   227,
+     232,   234,   236,   238,   240,   244,   249,   254,   259,   264,
+     269,   274,   275,   280,   281,   286,   289,   293,   297,   301,
+     305,   309,   313,   317,   320,   324,   328,   331,   334,   337,
+     340,   343,   347,   351,   355,   358,   361,   364,   367,   370,
+     373
 };
-
-static const short yyrhs[] = {    -1,
-   101,     0,     9,     0,     6,     0,     7,     0,     8,     0,
-    10,     0,    11,     0,    40,     0,    39,     0,    42,     0,
-    43,     0,    44,     0,    45,     0,    41,     0,    12,     0,
-    13,     0,    46,     0,    19,   108,     0,    20,   108,     0,
-    54,     0,    55,     3,     0,    56,     3,     0,    57,     3,
-     0,    21,   108,    22,   108,     0,    60,     0,    60,   108,
-     0,    61,     0,    62,     0,    62,   108,     0,    23,   108,
-     3,     0,    23,   108,    84,     3,     0,    24,   108,     0,
-    25,   105,     0,    26,     0,    26,     3,     0,    27,     0,
-    27,     3,     0,    28,     0,    28,     3,     0,    29,     0,
-    30,     0,    30,     3,     0,    31,     0,    31,     3,     0,
-    32,     0,    33,   105,     0,    33,   105,    35,     0,    36,
-     3,     0,    37,     3,     3,     0,    34,     3,     0,    38,
-     0,    38,     3,     0,    58,     3,     0,    59,     3,     0,
-    14,     0,    15,     0,    16,     0,    17,     0,    18,     0,
-    47,     0,    47,     3,     0,    48,     3,     0,    50,     0,
-    50,     3,     0,    52,     0,    52,     3,     0,    51,     0,
-    51,     3,     0,    53,     0,    53,     3,     0,    49,     0,
-    49,     3,     0,    49,    78,     3,     0,     3,     0,    77,
-     3,     0,    78,     3,     0,     4,   102,     3,     0,    79,
-     3,     0,   111,     0,   106,    76,   111,     0,     0,   111,
-    71,   107,     0,   111,     0,   109,     0,   108,    71,   111,
-     0,   108,    71,   109,     0,     0,   111,     5,   110,   106,
-     0,     3,     0,    64,     0,    63,     0,    65,     0,   111,
-    72,   111,     0,    66,    98,   108,   103,     0,    67,    98,
-   108,   103,     0,    68,    98,   108,   103,     0,    69,    98,
-   108,   103,     0,    70,    98,   108,   103,     0,   111,    98,
-   107,   103,     0,     0,   111,    73,   112,   111,     0,     0,
-   111,    74,   113,   111,     0,    75,   111,     0,   111,    77,
-   111,     0,   111,    78,   111,     0,   111,    79,   111,     0,
-   111,    80,   111,     0,   111,    81,   111,     0,   111,    82,
-   111,     0,   111,    83,   111,     0,    84,   111,     0,   111,
-    85,   111,     0,   111,    86,   111,     0,    78,   111,     0,
-    94,   111,     0,   111,    94,     0,    95,   111,     0,   111,
-    95,     0,   111,    96,   111,     0,   111,    97,   111,     0,
-   111,    99,   111,     0,    88,   111,     0,    89,   111,     0,
-    90,   111,     0,    91,   111,     0,    92,   111,     0,    93,
-   111,     0,    98,   108,   103,     0
+static const short yyrhs[] =
+{
+      -1,   101,     0,     9,     0,     6,     0,     7,     0,     8,
+       0,    10,     0,    11,     0,    40,     0,    39,     0,    42,
+       0,    43,     0,    44,     0,    45,     0,    41,     0,    12,
+       0,    13,     0,    46,     0,    19,   108,     0,    20,   108,
+       0,    54,     0,    55,     3,     0,    56,     3,     0,    57,
+       3,     0,    21,   108,    22,   108,     0,    60,     0,    60,
+     108,     0,    61,     0,    62,     0,    62,   108,     0,    23,
+     108,     3,     0,    23,   108,    84,     3,     0,    24,   108,
+       0,    25,   105,     0,    26,     0,    26,     3,     0,    27,
+       0,    27,     3,     0,    28,     0,    28,     3,     0,    29,
+       0,    30,     0,    30,     3,     0,    31,     0,    31,     3,
+       0,    32,     0,    33,   105,     0,    33,   105,    35,     0,
+      36,     3,     0,    37,     3,     3,     0,    34,     3,     0,
+      38,     0,    38,     3,     0,    58,     3,     0,    59,     3,
+       0,    14,     0,    15,     0,    16,     0,    17,     0,    18,
+       0,    47,     0,    47,     3,     0,    48,     3,     0,    50,
+       0,    50,     3,     0,    52,     0,    52,     3,     0,    51,
+       0,    51,     3,     0,    53,     0,    53,     3,     0,    49,
+       0,    49,     3,     0,    49,    78,     3,     0,     3,     0,
+      77,     3,     0,    78,     3,     0,     4,   102,     3,     0,
+      79,     3,     0,   111,     0,   106,    76,   111,     0,     0,
+     111,    71,   107,     0,   111,     0,   109,     0,   108,    71,
+     111,     0,   108,    71,   109,     0,     0,   111,     5,   110,
+     106,     0,     3,     0,    64,     0,    63,     0,    65,     0,
+     111,    72,   111,     0,    66,    98,   108,   103,     0,    67,
+      98,   108,   103,     0,    68,    98,   108,   103,     0,    69,
+      98,   108,   103,     0,    70,    98,   108,   103,     0,   111,
+      98,   107,   103,     0,     0,   111,    73,   112,   111,     0,
+       0,   111,    74,   113,   111,     0,    75,   111,     0,   111,
+      77,   111,     0,   111,    78,   111,     0,   111,    79,   111,
+       0,   111,    80,   111,     0,   111,    81,   111,     0,   111,
+      82,   111,     0,   111,    83,   111,     0,    84,   111,     0,
+     111,    85,   111,     0,   111,    86,   111,     0,    78,   111,
+       0,    94,   111,     0,   111,    94,     0,    95,   111,     0,
+     111,    95,     0,   111,    96,   111,     0,   111,    97,   111,
+       0,   111,    99,   111,     0,    88,   111,     0,    89,   111,
+       0,    90,   111,     0,    91,   111,     0,    92,   111,     0,
+      93,   111,     0,    98,   108,   103,     0
 };
 
 #endif
 
-#if YYDEBUG != 0
-static const short yyrline[] = { 0,
-   130,   132,   134,   142,   144,   146,   148,   150,   152,   154,
-   165,   167,   169,   171,   173,   175,   182,   189,   198,   200,
-   202,   204,   206,   208,   210,   212,   214,   216,   221,   239,
-   255,   257,   259,   261,   263,   265,   267,   269,   271,   273,
-   275,   277,   279,   281,   283,   285,   287,   289,   291,   293,
-   295,   297,   299,   301,   303,   305,   307,   309,   311,   313,
-   315,   317,   319,   321,   323,   325,   327,   329,   331,   333,
-   335,   337,   339,   341,   349,   350,   351,   352,   353,   357,
-   364,   377,   378,   382,   383,   384,   385,   389,   390,   393,
-   395,   397,   399,   402,   405,   407,   409,   411,   414,   424,
-   442,   443,   444,   445,   446,   449,   451,   453,   455,   457,
-   459,   461,   463,   466,   468,   471,   474,   476,   478,   480,
-   483,   485,   488,   496,   498,   500,   502,   504,   506,   508
+#if YYDEBUG
+/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
+static const short yyrline[] =
+{
+       0,   130,   132,   134,   142,   144,   146,   148,   150,   152,
+     154,   165,   167,   169,   171,   173,   175,   182,   189,   198,
+     200,   202,   204,   206,   208,   210,   212,   214,   216,   221,
+     239,   255,   257,   259,   261,   263,   265,   267,   269,   271,
+     273,   275,   277,   279,   281,   283,   285,   287,   289,   291,
+     293,   295,   297,   299,   301,   303,   305,   307,   309,   311,
+     313,   315,   317,   319,   321,   323,   325,   327,   329,   331,
+     333,   335,   337,   339,   341,   349,   350,   351,   352,   353,
+     357,   364,   377,   378,   382,   383,   384,   385,   389,   389,
+     394,   396,   398,   400,   403,   406,   408,   410,   412,   415,
+     425,   443,   443,   445,   445,   447,   450,   452,   454,   456,
+     458,   460,   462,   464,   467,   469,   472,   475,   477,   479,
+     481,   484,   486,   489,   497,   499,   501,   503,   505,   507,
+     509
 };
 #endif
 
 
-#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
+#if (YYDEBUG) || defined YYERROR_VERBOSE
 
-static const char * const yytname[] = {   "$","error","$undefined.","NUM","DFILE",
-"CONDITION","ALIAS","RALIAS","UNALIAS","DUMPMEM","AUTOMAP","HELP","UNDO","REDO",
-"LANGUAGE","INFOSOURCE","INFOSOURCES","COPYING","WARRANTY","PRINT","SET","MOVE",
-"TO","GIVE","REMOVE","JUMP","CONT","STEP","NEXT","UNTIL","STEPI","NEXTI","FINISH",
-"BREAK","DELETE","IF","COND","IGNORE","BREAKPOINTS","RESTORE","RESTART","QUIT",
-"RECORDON","RECORDOFF","REPLAY","REPLAYOFF","SYMBOL_FILE","FRAME","SELECT_FRAME",
-"BACKTRACE","UP_FRAME","DOWN_FRAME","UP_SILENTLY","DOWN_SILENTLY","DISPLAY",
-"UNDISPLAY","DISABLE_DISPLAY","ENABLE_DISPLAY","DISABLE_BREAK","ENABLE_BREAK",
-"OBJECT_TREE","FIND","LIST_GLOBALS","BTRUE","BFALSE","NOTHING","PARENT","CHILD",
-"SIBLING","CHILDREN","RANDOM","','","'='","ANDAND","OROR","NOTNOT","OR","'+'",
-"'-'","'*'","'/'","'%'","'&'","'|'","'~'","BYTEARRAY","WORDARRAY","precNEG",
-"NUMBER","OBJECT","ROUTINE","STRING","GLOBAL","LOCAL","INCREMENT","DECREMENT",
-"PROPADDR","PROPLENGTH","'('","'.'","SUPERCLASS","'#'","':'","')'","input","linespec",
-"orlist","arglist","commaexp","condexp","@1","exp","@2","@3", NULL
+/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
+static const char *const yytname[] =
+{
+  "$", "error", "$undefined.", "NUM", "DFILE", "CONDITION", "ALIAS", 
+  "RALIAS", "UNALIAS", "DUMPMEM", "AUTOMAP", "HELP", "UNDO", "REDO", 
+  "LANGUAGE", "INFOSOURCE", "INFOSOURCES", "COPYING", "WARRANTY", "PRINT", 
+  "SET", "MOVE", "TO", "GIVE", "REMOVE", "JUMP", "CONT", "STEP", "NEXT", 
+  "UNTIL", "STEPI", "NEXTI", "FINISH", "BREAK", "DELETE", "IF", "COND", 
+  "IGNORE", "BREAKPOINTS", "RESTORE", "RESTART", "QUIT", "RECORDON", 
+  "RECORDOFF", "REPLAY", "REPLAYOFF", "SYMBOL_FILE", "FRAME", 
+  "SELECT_FRAME", "BACKTRACE", "UP_FRAME", "DOWN_FRAME", "UP_SILENTLY", 
+  "DOWN_SILENTLY", "DISPLAY", "UNDISPLAY", "DISABLE_DISPLAY", 
+  "ENABLE_DISPLAY", "DISABLE_BREAK", "ENABLE_BREAK", "OBJECT_TREE", 
+  "FIND", "LIST_GLOBALS", "BTRUE", "BFALSE", "NOTHING", "PARENT", "CHILD", 
+  "SIBLING", "CHILDREN", "RANDOM", "','", "'='", "ANDAND", "OROR", 
+  "NOTNOT", "OR", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'~'", 
+  "BYTEARRAY", "WORDARRAY", "precNEG", "NUMBER", "OBJECT", "ROUTINE", 
+  "STRING", "GLOBAL", "LOCAL", "INCREMENT", "DECREMENT", "PROPADDR", 
+  "PROPLENGTH", "'('", "'.'", "SUPERCLASS", "'#'", "':'", "')'", "input", 
+  "linespec", "orlist", "arglist", "commaexp", "condexp", "@1", "exp", 
+  "@2", "@3", 0
 };
 #endif
 
-static const short yyr1[] = {     0,
-   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
-   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
-   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
-   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
-   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
-   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
-   104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
-   104,   104,   104,   104,   105,   105,   105,   105,   105,   106,
-   106,   107,   107,   108,   108,   108,   108,   110,   109,   111,
-   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
-   112,   111,   113,   111,   111,   111,   111,   111,   111,   111,
-   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
-   111,   111,   111,   111,   111,   111,   111,   111,   111,   111
+/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
+static const short yyr1[] =
+{
+       0,   104,   104,   104,   104,   104,   104,   104,   104,   104,
+     104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
+     104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
+     104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
+     104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
+     104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
+     104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
+     104,   104,   104,   104,   104,   105,   105,   105,   105,   105,
+     106,   106,   107,   107,   108,   108,   108,   108,   110,   109,
+     111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
+     111,   112,   111,   113,   111,   111,   111,   111,   111,   111,
+     111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
+     111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
+     111
 };
 
-static const short yyr2[] = {     0,
-     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-     1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
-     1,     2,     2,     2,     4,     1,     2,     1,     1,     2,
-     3,     4,     2,     2,     1,     2,     1,     2,     1,     2,
-     1,     1,     2,     1,     2,     1,     2,     3,     2,     3,
-     2,     1,     2,     2,     2,     1,     1,     1,     1,     1,
-     1,     2,     2,     1,     2,     1,     2,     1,     2,     1,
-     2,     1,     2,     3,     1,     2,     2,     3,     2,     1,
-     3,     0,     3,     1,     1,     3,     3,     0,     4,     1,
-     1,     1,     1,     3,     4,     4,     4,     4,     4,     4,
-     0,     4,     0,     4,     2,     3,     3,     3,     3,     3,
-     3,     3,     2,     3,     3,     2,     2,     2,     2,     2,
-     3,     3,     3,     2,     2,     2,     2,     2,     2,     3
+/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
+static const short yyr2[] =
+{
+       0,     0,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
+       2,     1,     2,     2,     2,     4,     1,     2,     1,     1,
+       2,     3,     4,     2,     2,     1,     2,     1,     2,     1,
+       2,     1,     1,     2,     1,     2,     1,     2,     3,     2,
+       3,     2,     1,     2,     2,     2,     1,     1,     1,     1,
+       1,     1,     2,     2,     1,     2,     1,     2,     1,     2,
+       1,     2,     1,     2,     3,     1,     2,     2,     3,     2,
+       1,     3,     0,     3,     1,     1,     3,     3,     0,     4,
+       1,     1,     1,     1,     3,     4,     4,     4,     4,     4,
+       4,     0,     4,     0,     4,     2,     3,     3,     3,     3,
+       3,     3,     3,     2,     3,     3,     2,     2,     2,     2,
+       2,     3,     3,     3,     2,     2,     2,     2,     2,     2,
+       3
 };
 
-static const short yydefact[] = {     1,
-     4,     5,     6,     3,     7,     8,    16,    17,    56,    57,
-    58,    59,    60,     0,     0,     0,     0,     0,     0,    35,
-    37,    39,    41,    42,    44,    46,     0,     0,     0,     0,
-    52,    10,     9,    15,    11,    12,    13,    14,    18,    61,
-     0,    72,    64,    68,    66,    70,    21,     0,     0,     0,
-     0,     0,    26,    28,    29,     2,    90,    92,    91,    93,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,    19,    85,    84,
-    20,     0,     0,    33,    75,     0,     0,     0,     0,    34,
-    36,    38,    40,    43,    45,    47,    51,    49,     0,    53,
-    62,    63,    73,     0,    65,    69,    67,    71,    22,    23,
-    24,    54,    55,    27,    30,     0,     0,     0,     0,     0,
-   105,   116,   113,   124,   125,   126,   127,   128,   129,   117,
-   119,     0,     0,    88,     0,   101,   103,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,   118,   120,     0,     0,
-    82,     0,     0,    31,     0,     0,    76,    77,    79,    48,
-    50,    74,     0,     0,     0,     0,     0,   130,    87,    86,
-     0,    94,     0,     0,   106,   107,   108,   109,   110,   111,
-   112,   114,   115,   121,   122,     0,     0,   123,    25,    32,
-    78,    95,    96,    97,    98,    99,    89,    80,   102,   104,
-   100,    82,     0,    83,    81,     0,     0,     0
+/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
+   doesn't specify something else to do.  Zero means the default is an
+   error. */
+static const short yydefact[] =
+{
+       1,     4,     5,     6,     3,     7,     8,    16,    17,    56,
+      57,    58,    59,    60,     0,     0,     0,     0,     0,     0,
+      35,    37,    39,    41,    42,    44,    46,     0,     0,     0,
+       0,    52,    10,     9,    15,    11,    12,    13,    14,    18,
+      61,     0,    72,    64,    68,    66,    70,    21,     0,     0,
+       0,     0,     0,    26,    28,    29,     2,    90,    92,    91,
+      93,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    19,    85,
+      84,    20,     0,     0,    33,    75,     0,     0,     0,     0,
+      34,    36,    38,    40,    43,    45,    47,    51,    49,     0,
+      53,    62,    63,    73,     0,    65,    69,    67,    71,    22,
+      23,    24,    54,    55,    27,    30,     0,     0,     0,     0,
+       0,   105,   116,   113,   124,   125,   126,   127,   128,   129,
+     117,   119,     0,     0,    88,     0,   101,   103,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   118,   120,     0,
+       0,    82,     0,     0,    31,     0,     0,    76,    77,    79,
+      48,    50,    74,     0,     0,     0,     0,     0,   130,    87,
+      86,     0,    94,     0,     0,   106,   107,   108,   109,   110,
+     111,   112,   114,   115,   121,   122,     0,     0,   123,    25,
+      32,    78,    95,    96,    97,    98,    99,    89,    80,   102,
+     104,   100,    82,     0,    83,    81,     0,     0,     0
 };
 
-static const short yydefgoto[] = {   206,
-    90,   197,   186,    78,    79,   171,    80,   173,   174
+static const short yydefgoto[] =
+{
+     206,    90,   197,   186,    78,    79,   171,    80,   173,   174
 };
 
-static const short yypact[] = {   136,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,   155,   155,   155,   155,   155,    15,    28,
-    33,    34,-32768,    44,    45,-32768,    15,    46,    47,    48,
-    55,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    56,
-    57,    13,    58,    60,    69,    71,-32768,    72,    83,    92,
-    93,    94,   155,-32768,   155,-32768,-32768,-32768,-32768,-32768,
-   -59,     1,     2,     8,     9,   155,   155,   155,   155,   155,
-   155,   155,   155,   155,   155,   155,   155,    37,-32768,   194,
-    37,    -7,    14,    37,-32768,    18,   107,   126,   133,-32768,
--32768,-32768,-32768,-32768,-32768,   102,-32768,-32768,   168,-32768,
--32768,-32768,-32768,   199,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,    37,    37,   155,   155,   155,   155,   155,
-    36,   -29,   115,   -29,   -29,   -29,   -29,   -29,   -29,    29,
-    29,   -51,   155,-32768,   155,-32768,-32768,   155,   155,   155,
-   155,   155,   155,   155,   155,   155,-32768,-32768,   155,   155,
-   155,   155,   155,-32768,   200,   201,-32768,-32768,-32768,-32768,
--32768,-32768,   -50,   -49,   -48,   -47,   -46,-32768,-32768,   194,
-   155,   251,   155,   155,   -53,   -53,   115,   115,   115,   115,
-   115,   -29,   -29,   -64,   -64,   103,   223,-32768,    37,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,    63,   251,    36,    36,
--32768,   155,   155,-32768,   251,   205,   207,-32768
+static const short yypact[] =
+{
+     136,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,   155,   155,   155,   155,   155,    15,
+      28,    33,    34,-32768,    44,    45,-32768,    15,    46,    47,
+      48,    55,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+      56,    57,    13,    58,    60,    69,    71,-32768,    72,    83,
+      92,    93,    94,   155,-32768,   155,-32768,-32768,-32768,-32768,
+  -32768,   -59,     1,     2,     8,     9,   155,   155,   155,   155,
+     155,   155,   155,   155,   155,   155,   155,   155,    37,-32768,
+     194,    37,    -7,    14,    37,-32768,    18,   107,   126,   133,
+  -32768,-32768,-32768,-32768,-32768,-32768,   102,-32768,-32768,   168,
+  -32768,-32768,-32768,-32768,   199,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,    37,    37,   155,   155,   155,   155,
+     155,    36,   -29,   115,   -29,   -29,   -29,   -29,   -29,   -29,
+      29,    29,   -51,   155,-32768,   155,-32768,-32768,   155,   155,
+     155,   155,   155,   155,   155,   155,   155,-32768,-32768,   155,
+     155,   155,   155,   155,-32768,   200,   201,-32768,-32768,-32768,
+  -32768,-32768,-32768,   -50,   -49,   -48,   -47,   -46,-32768,-32768,
+     194,   155,   251,   155,   155,   -53,   -53,   115,   115,   115,
+     115,   115,   -29,   -29,   -64,   -64,   103,   223,-32768,    37,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,    63,   251,    36,
+      36,-32768,   155,   155,-32768,   251,   205,   207,-32768
 };
 
-static const short yypgoto[] = {-32768,
-   181,-32768,    24,   -15,    82,-32768,   -62,-32768,-32768
+static const short yypgoto[] =
+{
+  -32768,   181,-32768,    24,   -15,    82,-32768,   -62,-32768,-32768
 };
 
 
 #define	YYLAST		350
 
 
-static const short yytable[] = {    81,
-    82,    83,    84,   121,   122,   123,   124,   125,   126,   127,
-   128,   129,   130,   131,   153,   103,   154,    85,    86,   133,
-   133,   133,   133,   133,   133,   140,   141,   142,   143,   144,
-    91,   145,   146,   151,   152,    92,    93,   114,   116,   115,
-   147,   148,   149,   150,   151,   152,    94,    95,    97,    98,
-    99,   168,   192,   193,   194,   195,   196,   100,   101,   102,
-   105,   132,   106,   133,   147,   148,   149,   150,   151,   152,
-   170,   107,   172,   108,   109,   175,   176,   177,   178,   179,
-   180,   181,   182,   183,   133,   110,   184,   185,   187,   188,
-   104,    87,    88,    89,   111,   112,   113,   155,   117,   118,
-   163,   164,   165,   166,   167,   119,   120,   133,   198,   157,
-   199,   200,   138,   139,   140,   141,   142,   143,   144,   156,
-   145,   146,-32768,-32768,   149,   150,   151,   152,   158,   147,
-   148,   149,   150,   151,   152,   159,   160,   189,   203,   187,
-   205,     1,     2,     3,     4,     5,     6,     7,     8,     9,
-    10,    11,    12,    13,    14,    15,    16,    57,    17,    18,
-    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
-   161,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
-    48,    49,    50,    51,    52,    53,    54,    55,   134,   145,
-   146,   162,   190,   191,   207,   201,   208,    96,   147,   148,
-   149,   150,   151,   152,   169,     0,     0,    58,    59,    60,
-    61,    62,    63,    64,    65,   204,     0,     0,     0,    66,
-     0,     0,    67,     0,     0,     0,    56,     0,    68,     0,
-     0,     0,    69,    70,    71,    72,    73,    74,    75,    76,
-     0,     0,    77,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,   135,   136,   137,     0,     0,
-   138,   139,   140,   141,   142,   143,   144,     0,   145,   146,
-     0,     0,     0,     0,     0,     0,     0,   147,   148,   149,
-   150,   151,   152,   202,   135,   136,   137,     0,     0,   138,
-   139,   140,   141,   142,   143,   144,     0,   145,   146,     0,
-     0,     0,     0,     0,     0,     0,   147,   148,   149,   150,
-   151,   152,   135,   136,   137,     0,     0,   138,   139,   140,
-   141,   142,   143,   144,     0,   145,   146,     0,     0,     0,
-     0,     0,     0,     0,   147,   148,   149,   150,   151,   152
+static const short yytable[] =
+{
+      81,    82,    83,    84,   121,   122,   123,   124,   125,   126,
+     127,   128,   129,   130,   131,   153,   103,   154,    85,    86,
+     133,   133,   133,   133,   133,   133,   140,   141,   142,   143,
+     144,    91,   145,   146,   151,   152,    92,    93,   114,   116,
+     115,   147,   148,   149,   150,   151,   152,    94,    95,    97,
+      98,    99,   168,   192,   193,   194,   195,   196,   100,   101,
+     102,   105,   132,   106,   133,   147,   148,   149,   150,   151,
+     152,   170,   107,   172,   108,   109,   175,   176,   177,   178,
+     179,   180,   181,   182,   183,   133,   110,   184,   185,   187,
+     188,   104,    87,    88,    89,   111,   112,   113,   155,   117,
+     118,   163,   164,   165,   166,   167,   119,   120,   133,   198,
+     157,   199,   200,   138,   139,   140,   141,   142,   143,   144,
+     156,   145,   146,-32768,-32768,   149,   150,   151,   152,   158,
+     147,   148,   149,   150,   151,   152,   159,   160,   189,   203,
+     187,   205,     1,     2,     3,     4,     5,     6,     7,     8,
+       9,    10,    11,    12,    13,    14,    15,    16,    57,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,   161,    29,    30,    31,    32,    33,    34,    35,    36,
+      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+      47,    48,    49,    50,    51,    52,    53,    54,    55,   134,
+     145,   146,   162,   190,   191,   207,   201,   208,    96,   147,
+     148,   149,   150,   151,   152,   169,     0,     0,    58,    59,
+      60,    61,    62,    63,    64,    65,   204,     0,     0,     0,
+      66,     0,     0,    67,     0,     0,     0,    56,     0,    68,
+       0,     0,     0,    69,    70,    71,    72,    73,    74,    75,
+      76,     0,     0,    77,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   135,   136,   137,     0,
+       0,   138,   139,   140,   141,   142,   143,   144,     0,   145,
+     146,     0,     0,     0,     0,     0,     0,     0,   147,   148,
+     149,   150,   151,   152,   202,   135,   136,   137,     0,     0,
+     138,   139,   140,   141,   142,   143,   144,     0,   145,   146,
+       0,     0,     0,     0,     0,     0,     0,   147,   148,   149,
+     150,   151,   152,   135,   136,   137,     0,     0,   138,   139,
+     140,   141,   142,   143,   144,     0,   145,   146,     0,     0,
+       0,     0,     0,     0,     0,   147,   148,   149,   150,   151,
+     152
 };
 
-static const short yycheck[] = {    15,
-    16,    17,    18,    66,    67,    68,    69,    70,    71,    72,
-    73,    74,    75,    76,    22,     3,     3,     3,     4,    71,
-    71,    71,    71,    71,    71,    79,    80,    81,    82,    83,
-     3,    85,    86,    98,    99,     3,     3,    53,    98,    55,
-    94,    95,    96,    97,    98,    99,     3,     3,     3,     3,
-     3,   103,   103,   103,   103,   103,   103,     3,     3,     3,
-     3,    77,     3,    71,    94,    95,    96,    97,    98,    99,
-   133,     3,   135,     3,     3,   138,   139,   140,   141,   142,
-   143,   144,   145,   146,    71,     3,   149,   150,   151,   152,
-    78,    77,    78,    79,     3,     3,     3,    84,    98,    98,
-   116,   117,   118,   119,   120,    98,    98,    71,   171,     3,
-   173,   174,    77,    78,    79,    80,    81,    82,    83,   102,
-    85,    86,    94,    95,    96,    97,    98,    99,     3,    94,
-    95,    96,    97,    98,    99,     3,    35,   153,    76,   202,
-   203,     6,     7,     8,     9,    10,    11,    12,    13,    14,
-    15,    16,    17,    18,    19,    20,    21,     3,    23,    24,
-    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
-     3,    36,    37,    38,    39,    40,    41,    42,    43,    44,
-    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
-    55,    56,    57,    58,    59,    60,    61,    62,     5,    85,
-    86,     3,     3,     3,     0,   103,     0,    27,    94,    95,
-    96,    97,    98,    99,   133,    -1,    -1,    63,    64,    65,
-    66,    67,    68,    69,    70,   202,    -1,    -1,    -1,    75,
-    -1,    -1,    78,    -1,    -1,    -1,   101,    -1,    84,    -1,
-    -1,    -1,    88,    89,    90,    91,    92,    93,    94,    95,
-    -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
-    77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,
-    97,    98,    99,    71,    72,    73,    74,    -1,    -1,    77,
-    78,    79,    80,    81,    82,    83,    -1,    85,    86,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
-    98,    99,    72,    73,    74,    -1,    -1,    77,    78,    79,
-    80,    81,    82,    83,    -1,    85,    86,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,    99
+static const short yycheck[] =
+{
+      15,    16,    17,    18,    66,    67,    68,    69,    70,    71,
+      72,    73,    74,    75,    76,    22,     3,     3,     3,     4,
+      71,    71,    71,    71,    71,    71,    79,    80,    81,    82,
+      83,     3,    85,    86,    98,    99,     3,     3,    53,    98,
+      55,    94,    95,    96,    97,    98,    99,     3,     3,     3,
+       3,     3,   103,   103,   103,   103,   103,   103,     3,     3,
+       3,     3,    77,     3,    71,    94,    95,    96,    97,    98,
+      99,   133,     3,   135,     3,     3,   138,   139,   140,   141,
+     142,   143,   144,   145,   146,    71,     3,   149,   150,   151,
+     152,    78,    77,    78,    79,     3,     3,     3,    84,    98,
+      98,   116,   117,   118,   119,   120,    98,    98,    71,   171,
+       3,   173,   174,    77,    78,    79,    80,    81,    82,    83,
+     102,    85,    86,    94,    95,    96,    97,    98,    99,     3,
+      94,    95,    96,    97,    98,    99,     3,    35,   153,    76,
+     202,   203,     6,     7,     8,     9,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,     3,    23,
+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
+      34,     3,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    56,    57,    58,    59,    60,    61,    62,     5,
+      85,    86,     3,     3,     3,     0,   103,     0,    27,    94,
+      95,    96,    97,    98,    99,   133,    -1,    -1,    63,    64,
+      65,    66,    67,    68,    69,    70,   202,    -1,    -1,    -1,
+      75,    -1,    -1,    78,    -1,    -1,    -1,   101,    -1,    84,
+      -1,    -1,    -1,    88,    89,    90,    91,    92,    93,    94,
+      95,    -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
+      -1,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
+      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
+      96,    97,    98,    99,    71,    72,    73,    74,    -1,    -1,
+      77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,
+      97,    98,    99,    72,    73,    74,    -1,    -1,    77,    78,
+      79,    80,    81,    82,    83,    -1,    85,    86,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,
+      99
 };
 /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
-#line 3 "/usr/local/share/bison.simple"
-/* This file comes from bison-1.28.  */
+#line 3 "/usr/share/bison/bison.simple"
 
 /* Skeleton output parser for bison,
-   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.
+
+   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
+   Foundation, Inc.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -535,62 +567,131 @@
    This special exception was added by the Free Software Foundation
    in version 1.24 of Bison.  */
 
-/* This is the parser code that is written into each bison parser
-  when the %semantic_parser declaration is not specified in the grammar.
-  It was written by Richard Stallman by simplifying the hairy parser
-  used when %semantic_parser is specified.  */
-
-#ifndef YYSTACK_USE_ALLOCA
-#ifdef alloca
-#define YYSTACK_USE_ALLOCA
-#else /* alloca not defined */
-#ifdef __GNUC__
-#define YYSTACK_USE_ALLOCA
-#define alloca __builtin_alloca
-#else /* not GNU C.  */
-#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
-#define YYSTACK_USE_ALLOCA
-#include <alloca.h>
-#else /* not sparc */
-/* We think this test detects Watcom and Microsoft C.  */
-/* This used to test MSDOS, but that is a bad idea
-   since that symbol is in the user namespace.  */
-#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
-#if 0 /* No need for malloc.h, which pollutes the namespace;
-	 instead, just don't use alloca.  */
-#include <malloc.h>
-#endif
-#else /* not MSDOS, or __TURBOC__ */
-#if defined(_AIX)
-/* I don't know what this was needed for, but it pollutes the namespace.
-   So I turned it off.   rms, 2 May 1997.  */
-/* #include <malloc.h>  */
- #pragma alloca
-#define YYSTACK_USE_ALLOCA
-#else /* not MSDOS, or __TURBOC__, or _AIX */
-#if 0
-#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
-		 and on HPUX 10.  Eventually we can turn this on.  */
-#define YYSTACK_USE_ALLOCA
-#define alloca __builtin_alloca
-#endif /* __hpux */
-#endif
-#endif /* not _AIX */
-#endif /* not MSDOS, or __TURBOC__ */
-#endif /* not sparc */
-#endif /* not GNU C */
-#endif /* alloca not defined */
-#endif /* YYSTACK_USE_ALLOCA not defined */
+/* This is the parser code that is written into each bison parser when
+   the %semantic_parser declaration is not specified in the grammar.
+   It was written by Richard Stallman by simplifying the hairy parser
+   used when %semantic_parser is specified.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# if YYSTACK_USE_ALLOCA
+#  define YYSTACK_ALLOC alloca
+# else
+#  ifndef YYSTACK_USE_ALLOCA
+#   if defined (alloca) || defined (_ALLOCA_H)
+#    define YYSTACK_ALLOC alloca
+#   else
+#    ifdef __GNUC__
+#     define YYSTACK_ALLOC __builtin_alloca
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's `empty if-body' warning. */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
+# else
+#  if defined (__STDC__) || defined (__cplusplus)
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   define YYSIZE_T size_t
+#  endif
+#  define YYSTACK_ALLOC malloc
+#  define YYSTACK_FREE free
+# endif
+#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */
+
+
+#if (! defined (yyoverflow) \
+     && (! defined (__cplusplus) \
+	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  short yyss;
+  YYSTYPE yyvs;
+# if YYLSP_NEEDED
+  YYLTYPE yyls;
+# endif
+};
 
-#ifdef YYSTACK_USE_ALLOCA
-#define YYSTACK_ALLOC alloca
-#else
-#define YYSTACK_ALLOC malloc
-#endif
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
 
-/* Note: there must be only one dollar sign in this file.
-   It is replaced by the list of actions, each action
-   as one case of the switch.  */
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# if YYLSP_NEEDED
+#  define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
+      + 2 * YYSTACK_GAP_MAX)
+# else
+#  define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
+      + YYSTACK_GAP_MAX)
+# endif
+
+/* Copy COUNT objects from FROM to TO.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if 1 < __GNUC__
+#   define YYCOPY(To, From, Count) \
+      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
+#  else
+#   define YYCOPY(To, From, Count)		\
+      do					\
+	{					\
+	  register YYSIZE_T yyi;		\
+	  for (yyi = 0; yyi < (Count); yyi++)	\
+	    (To)[yyi] = (From)[yyi];		\
+	}					\
+      while (0)
+#  endif
+# endif
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack)					\
+    do									\
+      {									\
+	YYSIZE_T yynewbytes;						\
+	YYCOPY (&yyptr->Stack, Stack, yysize);				\
+	Stack = &yyptr->Stack;						\
+	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
+	yyptr += yynewbytes / sizeof (*yyptr);				\
+      }									\
+    while (0)
+
+#endif
+
+
+#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
+# define YYSIZE_T __SIZE_TYPE__
+#endif
+#if ! defined (YYSIZE_T) && defined (size_t)
+# define YYSIZE_T size_t
+#endif
+#if ! defined (YYSIZE_T)
+# if defined (__STDC__) || defined (__cplusplus)
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# endif
+#endif
+#if ! defined (YYSIZE_T)
+# define YYSIZE_T unsigned int
+#endif
 
 #define yyerrok		(yyerrstatus = 0)
 #define yyclearin	(yychar = YYEMPTY)
@@ -599,131 +700,161 @@
 #define YYACCEPT	goto yyacceptlab
 #define YYABORT 	goto yyabortlab
 #define YYERROR		goto yyerrlab1
-/* Like YYERROR except do call yyerror.
-   This remains here temporarily to ease the
-   transition to the new meaning of YYERROR, for GCC.
+/* Like YYERROR except do call yyerror.  This remains here temporarily
+   to ease the transition to the new meaning of YYERROR, for GCC.
    Once GCC version 2 has supplanted version 1, this can go.  */
 #define YYFAIL		goto yyerrlab
 #define YYRECOVERING()  (!!yyerrstatus)
-#define YYBACKUP(token, value) \
+#define YYBACKUP(Token, Value)					\
 do								\
   if (yychar == YYEMPTY && yylen == 1)				\
-    { yychar = (token), yylval = (value);			\
+    {								\
+      yychar = (Token);						\
+      yylval = (Value);						\
       yychar1 = YYTRANSLATE (yychar);				\
       YYPOPSTACK;						\
       goto yybackup;						\
     }								\
   else								\
-    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
+    { 								\
+      yyerror ("syntax error: cannot back up");			\
+      YYERROR;							\
+    }								\
 while (0)
 
 #define YYTERROR	1
 #define YYERRCODE	256
 
-#ifndef YYPURE
-#define YYLEX		yylex()
-#endif
 
-#ifdef YYPURE
-#ifdef YYLSP_NEEDED
-#ifdef YYLEX_PARAM
-#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
-#else
-#define YYLEX		yylex(&yylval, &yylloc)
-#endif
-#else /* not YYLSP_NEEDED */
-#ifdef YYLEX_PARAM
-#define YYLEX		yylex(&yylval, YYLEX_PARAM)
-#else
-#define YYLEX		yylex(&yylval)
-#endif
-#endif /* not YYLSP_NEEDED */
-#endif
-
-/* If nonreentrant, generate the variables here */
+/* YYLLOC_DEFAULT -- Compute the default location (before the actions
+   are run).
 
-#ifndef YYPURE
-
-int	yychar;			/*  the lookahead symbol		*/
-YYSTYPE	yylval;			/*  the semantic value of the		*/
-				/*  lookahead symbol			*/
-
-#ifdef YYLSP_NEEDED
-YYLTYPE yylloc;			/*  location data for the lookahead	*/
-				/*  symbol				*/
+   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
+   first token.  By default, to implement support for ranges, extend
+   its range to the last symbol.  */
+
+#ifndef YYLLOC_DEFAULT
+# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
+   Current.last_line   = Rhs[N].last_line;	\
+   Current.last_column = Rhs[N].last_column;
 #endif
 
-int yynerrs;			/*  number of parse errors so far       */
-#endif  /* not YYPURE */
-
-#if YYDEBUG != 0
-int yydebug;			/*  nonzero means print parse trace	*/
-/* Since this is uninitialized, it does not stop multiple parsers
-   from coexisting.  */
-#endif
 
-/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/
+/* YYLEX -- calling `yylex' with the right arguments.  */
+
+#if YYPURE
+# if YYLSP_NEEDED
+#  ifdef YYLEX_PARAM
+#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
+#  else
+#   define YYLEX		yylex (&yylval, &yylloc)
+#  endif
+# else /* !YYLSP_NEEDED */
+#  ifdef YYLEX_PARAM
+#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
+#  else
+#   define YYLEX		yylex (&yylval)
+#  endif
+# endif /* !YYLSP_NEEDED */
+#else /* !YYPURE */
+# define YYLEX			yylex ()
+#endif /* !YYPURE */
+
+
+/* Enable debugging if requested.  */
+#if YYDEBUG
+
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)			\
+do {						\
+  if (yydebug)					\
+    YYFPRINTF Args;				\
+} while (0)
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !YYDEBUG */
+# define YYDPRINTF(Args)
+#endif /* !YYDEBUG */
 
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
 #ifndef	YYINITDEPTH
-#define YYINITDEPTH 200
+# define YYINITDEPTH 200
 #endif
 
-/*  YYMAXDEPTH is the maximum size the stacks can grow to
-    (effective only if the built-in stack extension method is used).  */
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
+
+   Do not make this value too large; the results are undefined if
+   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
 
 #if YYMAXDEPTH == 0
-#undef YYMAXDEPTH
+# undef YYMAXDEPTH
 #endif
 
 #ifndef YYMAXDEPTH
-#define YYMAXDEPTH 10000
+# define YYMAXDEPTH 10000
 #endif
 
-/* Define __yy_memcpy.  Note that the size argument
-   should be passed with type unsigned int, because that is what the non-GCC
-   definitions require.  With GCC, __builtin_memcpy takes an arg
-   of type size_t, but it can handle unsigned int.  */
-
-#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
-#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
-#else				/* not GNU C or C++ */
-#ifndef __cplusplus
-
-/* This is the most reliable way to avoid incompatibilities
-   in available built-in functions on various systems.  */
-static void
-__yy_memcpy (to, from, count)
-     char *to;
-     char *from;
-     unsigned int count;
-{
-  register char *f = from;
-  register char *t = to;
-  register int i = count;
+#ifdef YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined (__GLIBC__) && defined (_STRING_H)
+#   define yystrlen strlen
+#  else
+/* Return the length of YYSTR.  */
+static YYSIZE_T
+#   if defined (__STDC__) || defined (__cplusplus)
+yystrlen (const char *yystr)
+#   else
+yystrlen (yystr)
+     const char *yystr;
+#   endif
+{
+  register const char *yys = yystr;
+
+  while (*yys++ != '\0')
+    continue;
 
-  while (i-- > 0)
-    *t++ = *f++;
+  return yys - yystr - 1;
 }
+#  endif
+# endif
 
-#else /* __cplusplus */
+# ifndef yystpcpy
+#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+static char *
+#   if defined (__STDC__) || defined (__cplusplus)
+yystpcpy (char *yydest, const char *yysrc)
+#   else
+yystpcpy (yydest, yysrc)
+     char *yydest;
+     const char *yysrc;
+#   endif
+{
+  register char *yyd = yydest;
+  register const char *yys = yysrc;
 
-/* This is the most reliable way to avoid incompatibilities
-   in available built-in functions on various systems.  */
-static void
-__yy_memcpy (char *to, char *from, unsigned int count)
-{
-  register char *t = to;
-  register char *f = from;
-  register int i = count;
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
 
-  while (i-- > 0)
-    *t++ = *f++;
+  return yyd - 1;
 }
-
-#endif
+#  endif
+# endif
 #endif
 
-#line 217 "/usr/local/share/bison.simple"
+#line 315 "/usr/share/bison/bison.simple"
+
 
 /* The user can define YYPARSE_PARAM as the name of an argument to be passed
    into yyparse.  The argument should have type void *.
@@ -732,76 +863,121 @@
    to the proper pointer type.  */
 
 #ifdef YYPARSE_PARAM
-#ifdef __cplusplus
-#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
-#define YYPARSE_PARAM_DECL
-#else /* not __cplusplus */
-#define YYPARSE_PARAM_ARG YYPARSE_PARAM
-#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
-#endif /* not __cplusplus */
-#else /* not YYPARSE_PARAM */
-#define YYPARSE_PARAM_ARG
-#define YYPARSE_PARAM_DECL
-#endif /* not YYPARSE_PARAM */
+# if defined (__STDC__) || defined (__cplusplus)
+#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
+#  define YYPARSE_PARAM_DECL
+# else
+#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
+#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
+# endif
+#else /* !YYPARSE_PARAM */
+# define YYPARSE_PARAM_ARG
+# define YYPARSE_PARAM_DECL
+#endif /* !YYPARSE_PARAM */
 
 /* Prevent warning if -Wstrict-prototypes.  */
 #ifdef __GNUC__
-#ifdef YYPARSE_PARAM
+# ifdef YYPARSE_PARAM
 int yyparse (void *);
-#else
+# else
 int yyparse (void);
+# endif
 #endif
+
+/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
+   variables are global, or local to YYPARSE.  */
+
+#define YY_DECL_NON_LSP_VARIABLES			\
+/* The lookahead symbol.  */				\
+int yychar;						\
+							\
+/* The semantic value of the lookahead symbol. */	\
+YYSTYPE yylval;						\
+							\
+/* Number of parse errors so far.  */			\
+int yynerrs;
+
+#if YYLSP_NEEDED
+# define YY_DECL_VARIABLES			\
+YY_DECL_NON_LSP_VARIABLES			\
+						\
+/* Location data for the lookahead symbol.  */	\
+YYLTYPE yylloc;
+#else
+# define YY_DECL_VARIABLES			\
+YY_DECL_NON_LSP_VARIABLES
 #endif
 
+
+/* If nonreentrant, generate the variables here. */
+
+#if !YYPURE
+YY_DECL_VARIABLES
+#endif  /* !YYPURE */
+
 int
-yyparse(YYPARSE_PARAM_ARG)
+yyparse (YYPARSE_PARAM_ARG)
      YYPARSE_PARAM_DECL
 {
+  /* If reentrant, generate the variables here. */
+#if YYPURE
+  YY_DECL_VARIABLES
+#endif  /* !YYPURE */
+
   register int yystate;
   register int yyn;
+  int yyresult;
+  /* Number of tokens to shift before error messages enabled.  */
+  int yyerrstatus;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yychar1 = 0;
+
+  /* Three stacks and their tools:
+     `yyss': related to states,
+     `yyvs': related to semantic values,
+     `yyls': related to locations.
+
+     Refer to the stacks thru separate pointers, to allow yyoverflow
+     to reallocate them elsewhere.  */
+
+  /* The state stack. */
+  short	yyssa[YYINITDEPTH];
+  short *yyss = yyssa;
   register short *yyssp;
-  register YYSTYPE *yyvsp;
-  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
-  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */
 
-  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
-  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/
-
-  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
-  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */
+  /* The semantic value stack.  */
+  YYSTYPE yyvsa[YYINITDEPTH];
+  YYSTYPE *yyvs = yyvsa;
+  register YYSTYPE *yyvsp;
 
-#ifdef YYLSP_NEEDED
-  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
+#if YYLSP_NEEDED
+  /* The location stack.  */
+  YYLTYPE yylsa[YYINITDEPTH];
   YYLTYPE *yyls = yylsa;
   YYLTYPE *yylsp;
+#endif
 
-#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
+#if YYLSP_NEEDED
+# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
 #else
-#define YYPOPSTACK   (yyvsp--, yyssp--)
+# define YYPOPSTACK   (yyvsp--, yyssp--)
 #endif
 
-  int yystacksize = YYINITDEPTH;
-  int yyfree_stacks = 0;
+  YYSIZE_T yystacksize = YYINITDEPTH;
 
-#ifdef YYPURE
-  int yychar;
-  YYSTYPE yylval;
-  int yynerrs;
-#ifdef YYLSP_NEEDED
-  YYLTYPE yylloc;
-#endif
-#endif
 
-  YYSTYPE yyval;		/*  the variable used to return		*/
-				/*  semantic values from the action	*/
-				/*  routines				*/
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+#if YYLSP_NEEDED
+  YYLTYPE yyloc;
+#endif
 
+  /* When reducing, the number of symbols on the RHS of the reduced
+     rule. */
   int yylen;
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Starting parse\n");
-#endif
+  YYDPRINTF ((stderr, "Starting parse\n"));
 
   yystate = 0;
   yyerrstatus = 0;
@@ -813,110 +989,110 @@
      so that they stay on the same level as the state stack.
      The wasted elements are never initialized.  */
 
-  yyssp = yyss - 1;
+  yyssp = yyss;
   yyvsp = yyvs;
-#ifdef YYLSP_NEEDED
+#if YYLSP_NEEDED
   yylsp = yyls;
 #endif
+  goto yysetstate;
 
-/* Push a new state, which is found in  yystate  .  */
-/* In all cases, when you get here, the value and location stacks
-   have just been pushed. so pushing a state here evens the stacks.  */
-yynewstate:
+/*------------------------------------------------------------.
+| yynewstate -- Push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+ yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed. so pushing a state here evens the stacks.
+     */
+  yyssp++;
 
-  *++yyssp = yystate;
+ yysetstate:
+  *yyssp = yystate;
 
   if (yyssp >= yyss + yystacksize - 1)
     {
-      /* Give user a chance to reallocate the stack */
-      /* Use copies of these so that the &'s don't force the real ones into memory. */
-      YYSTYPE *yyvs1 = yyvs;
-      short *yyss1 = yyss;
-#ifdef YYLSP_NEEDED
-      YYLTYPE *yyls1 = yyls;
-#endif
-
       /* Get the current used size of the three stacks, in elements.  */
-      int size = yyssp - yyss + 1;
+      YYSIZE_T yysize = yyssp - yyss + 1;
 
 #ifdef yyoverflow
-      /* Each stack pointer address is followed by the size of
-	 the data in use in that stack, in bytes.  */
-#ifdef YYLSP_NEEDED
-      /* This used to be a conditional around just the two extra args,
-	 but that might be undefined if yyoverflow is a macro.  */
-      yyoverflow("parser stack overflow",
-		 &yyss1, size * sizeof (*yyssp),
-		 &yyvs1, size * sizeof (*yyvsp),
-		 &yyls1, size * sizeof (*yylsp),
-		 &yystacksize);
-#else
-      yyoverflow("parser stack overflow",
-		 &yyss1, size * sizeof (*yyssp),
-		 &yyvs1, size * sizeof (*yyvsp),
-		 &yystacksize);
-#endif
-
-      yyss = yyss1; yyvs = yyvs1;
-#ifdef YYLSP_NEEDED
-      yyls = yyls1;
-#endif
+      {
+	/* Give user a chance to reallocate the stack. Use copies of
+	   these so that the &'s don't force the real ones into
+	   memory.  */
+	YYSTYPE *yyvs1 = yyvs;
+	short *yyss1 = yyss;
+
+	/* Each stack pointer address is followed by the size of the
+	   data in use in that stack, in bytes.  */
+# if YYLSP_NEEDED
+	YYLTYPE *yyls1 = yyls;
+	/* This used to be a conditional around just the two extra args,
+	   but that might be undefined if yyoverflow is a macro.  */
+	yyoverflow ("parser stack overflow",
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yyls1, yysize * sizeof (*yylsp),
+		    &yystacksize);
+	yyls = yyls1;
+# else
+	yyoverflow ("parser stack overflow",
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yystacksize);
+# endif
+	yyss = yyss1;
+	yyvs = yyvs1;
+      }
 #else /* no yyoverflow */
+# ifndef YYSTACK_RELOCATE
+      goto yyoverflowlab;
+# else
       /* Extend the stack our own way.  */
       if (yystacksize >= YYMAXDEPTH)
-	{
-	  yyerror("parser stack overflow");
-	  if (yyfree_stacks)
-	    {
-	      free (yyss);
-	      free (yyvs);
-#ifdef YYLSP_NEEDED
-	      free (yyls);
-#endif
-	    }
-	  return 2;
-	}
+	goto yyoverflowlab;
       yystacksize *= 2;
       if (yystacksize > YYMAXDEPTH)
 	yystacksize = YYMAXDEPTH;
-#ifndef YYSTACK_USE_ALLOCA
-      yyfree_stacks = 1;
-#endif
-      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
-      __yy_memcpy ((char *)yyss, (char *)yyss1,
-		   size * (unsigned int) sizeof (*yyssp));
-      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
-      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
-		   size * (unsigned int) sizeof (*yyvsp));
-#ifdef YYLSP_NEEDED
-      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
-      __yy_memcpy ((char *)yyls, (char *)yyls1,
-		   size * (unsigned int) sizeof (*yylsp));
-#endif
+
+      {
+	short *yyss1 = yyss;
+	union yyalloc *yyptr =
+	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
+	if (! yyptr)
+	  goto yyoverflowlab;
+	YYSTACK_RELOCATE (yyss);
+	YYSTACK_RELOCATE (yyvs);
+# if YYLSP_NEEDED
+	YYSTACK_RELOCATE (yyls);
+# endif
+# undef YYSTACK_RELOCATE
+	if (yyss1 != yyssa)
+	  YYSTACK_FREE (yyss1);
+      }
+# endif
 #endif /* no yyoverflow */
 
-      yyssp = yyss + size - 1;
-      yyvsp = yyvs + size - 1;
-#ifdef YYLSP_NEEDED
-      yylsp = yyls + size - 1;
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
+#if YYLSP_NEEDED
+      yylsp = yyls + yysize - 1;
 #endif
 
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
-#endif
+      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
+		  (unsigned long int) yystacksize));
 
       if (yyssp >= yyss + yystacksize - 1)
 	YYABORT;
     }
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Entering state %d\n", yystate);
-#endif
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
 
   goto yybackup;
- yybackup:
+
+
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
 
 /* Do appropriate processing given the current state.  */
 /* Read a lookahead token if we need one and don't already have one.  */
@@ -935,10 +1111,7 @@
 
   if (yychar == YYEMPTY)
     {
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Reading a token: ");
-#endif
+      YYDPRINTF ((stderr, "Reading a token: "));
       yychar = YYLEX;
     }
 
@@ -949,25 +1122,25 @@
       yychar1 = 0;
       yychar = YYEOF;		/* Don't call YYLEX any more */
 
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Now at end of input.\n");
-#endif
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
     }
   else
     {
-      yychar1 = YYTRANSLATE(yychar);
+      yychar1 = YYTRANSLATE (yychar);
 
-#if YYDEBUG != 0
+#if YYDEBUG
+     /* We have to keep this `#if YYDEBUG', since we use variables
+	which are defined only if `YYDEBUG' is set.  */
       if (yydebug)
 	{
-	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
-	  /* Give the individual parser a way to print the precise meaning
-	     of a token, for further debugging info.  */
-#ifdef YYPRINT
+	  YYFPRINTF (stderr, "Next token is %d (%s",
+		     yychar, yytname[yychar1]);
+	  /* Give the individual parser a way to print the precise
+	     meaning of a token, for further debugging info.  */
+# ifdef YYPRINT
 	  YYPRINT (stderr, yychar, yylval);
-#endif
-	  fprintf (stderr, ")\n");
+# endif
+	  YYFPRINTF (stderr, ")\n");
 	}
 #endif
     }
@@ -999,62 +1172,84 @@
     YYACCEPT;
 
   /* Shift the lookahead token.  */
-
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
-#endif
+  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
+	      yychar, yytname[yychar1]));
 
   /* Discard the token being shifted unless it is eof.  */
   if (yychar != YYEOF)
     yychar = YYEMPTY;
 
   *++yyvsp = yylval;
-#ifdef YYLSP_NEEDED
+#if YYLSP_NEEDED
   *++yylsp = yylloc;
 #endif
 
-  /* count tokens shifted since error; after three, turn off error status.  */
-  if (yyerrstatus) yyerrstatus--;
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
 
   yystate = yyn;
   goto yynewstate;
 
-/* Do the default action for the current state.  */
-yydefault:
 
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
   yyn = yydefact[yystate];
   if (yyn == 0)
     goto yyerrlab;
+  goto yyreduce;
+
 
-/* Do a reduction.  yyn is the number of a rule to reduce with.  */
+/*-----------------------------.
+| yyreduce -- Do a reduction.  |
+`-----------------------------*/
 yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
   yylen = yyr2[yyn];
-  if (yylen > 0)
-    yyval = yyvsp[1-yylen]; /* implement default value of the action */
 
-#if YYDEBUG != 0
+  /* If YYLEN is nonzero, implement the default value of the action:
+     `$$ = $1'.
+
+     Otherwise, the following line sets YYVAL to the semantic value of
+     the lookahead token.  This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
+
+#if YYLSP_NEEDED
+  /* Similarly for the default location.  Let the user run additional
+     commands if for instance locations are ranges.  */
+  yyloc = yylsp[1-yylen];
+  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
+#endif
+
+#if YYDEBUG
+  /* We have to keep this `#if YYDEBUG', since we use variables which
+     are defined only if `YYDEBUG' is set.  */
   if (yydebug)
     {
-      int i;
+      int yyi;
 
-      fprintf (stderr, "Reducing via rule %d (line %d), ",
-	       yyn, yyrline[yyn]);
+      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
+		 yyn, yyrline[yyn]);
 
       /* Print the symbols being reduced, and their result.  */
-      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
-	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
-      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
+      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
+	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
+      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
     }
 #endif
 
-
   switch (yyn) {
 
 case 2:
 #line 132 "inform.y"
-{ lex_offset = n_strlen(lex_expression); ;
-    break;}
+{ lex_offset = n_strlen(lex_expression); }
+    break;
 case 3:
 #line 134 "inform.y"
 {
@@ -1063,32 +1258,32 @@
 					  filemode_Write, lex_tail());
 		w_glk_put_buffer_stream(f, (char *) z_memory, total_size);
 		glk_stream_close(f, NULL);
-	;
-    break;}
+	}
+    break;
 case 4:
 #line 142 "inform.y"
-{ parse_new_alias(lex_tail(), FALSE); ;
-    break;}
+{ parse_new_alias(lex_tail(), FALSE); }
+    break;
 case 5:
 #line 144 "inform.y"
-{ parse_new_alias(lex_tail(), TRUE); ;
-    break;}
+{ parse_new_alias(lex_tail(), TRUE); }
+    break;
 case 6:
 #line 146 "inform.y"
-{ remove_alias(lex_tail()); ;
-    break;}
+{ remove_alias(lex_tail()); }
+    break;
 case 7:
 #line 148 "inform.y"
-{ automap_init(object_count, lex_tail()); ;
-    break;}
+{ automap_init(object_count, lex_tail()); }
+    break;
 case 8:
 #line 150 "inform.y"
-{ inform_help(); ;
-    break;}
+{ inform_help(); }
+    break;
 case 9:
 #line 152 "inform.y"
-{ op_restart(); exit_debugger = TRUE; read_abort = TRUE;  ;
-    break;}
+{ op_restart(); exit_debugger = TRUE; read_abort = TRUE;  }
+    break;
 case 10:
 #line 154 "inform.y"
 {
@@ -1100,28 +1295,28 @@
 		    mop_store_result(2);
 		} else {
 		  infix_print_string("Restore failed.\n");
-		} ;
-    break;}
+		} }
+    break;
 case 11:
 #line 165 "inform.y"
-{ zword oldop0 = operand[0]; operand[0] = 4; op_output_stream(); operand[0] = oldop0; ;
-    break;}
+{ zword oldop0 = operand[0]; operand[0] = 4; op_output_stream(); operand[0] = oldop0; }
+    break;
 case 12:
 #line 167 "inform.y"
-{ zword oldop0 = operand[0]; operand[0] = neg(4); op_output_stream(); operand[0] = oldop0; ;
-    break;}
+{ zword oldop0 = operand[0]; operand[0] = neg(4); op_output_stream(); operand[0] = oldop0; }
+    break;
 case 13:
 #line 169 "inform.y"
-{ zword oldop0 = operand[0]; operand[0] = 1; op_input_stream(); operand[0] = oldop0; exit_debugger = TRUE; ;
-    break;}
+{ zword oldop0 = operand[0]; operand[0] = 1; op_input_stream(); operand[0] = oldop0; exit_debugger = TRUE; }
+    break;
 case 14:
 #line 171 "inform.y"
-{ zword oldop0 = operand[0]; operand[0] = 0; op_input_stream(); operand[0] = oldop0; ;
-    break;}
+{ zword oldop0 = operand[0]; operand[0] = 0; op_input_stream(); operand[0] = oldop0; }
+    break;
 case 15:
 #line 173 "inform.y"
-{ z_close(); glk_exit();	;
-    break;}
+{ z_close(); glk_exit();	}
+    break;
 case 16:
 #line 175 "inform.y"
 {
@@ -1129,8 +1324,8 @@
 		  read_abort = TRUE; exit_debugger = TRUE;
 		} else {
 		  infix_print_string("No undo slots.\n");
-		} ;
-    break;}
+		} }
+    break;
 case 17:
 #line 182 "inform.y"
 {
@@ -1138,8 +1333,8 @@
 		  read_abort = TRUE; exit_debugger = TRUE;
 		} else {
 		  infix_print_string("No redo slots.\n");
-		} ;
-    break;}
+		} }
+    break;
 case 18:
 #line 189 "inform.y"
 {
@@ -1149,51 +1344,51 @@
 		if(f) {
 		  kill_infix();
 		  init_infix(f);
-		} ;
-    break;}
+		} }
+    break;
 case 19:
 #line 198 "inform.y"
-{ infix_display(yyvsp[0].val);		;
-    break;}
+{ infix_display(yyvsp[0].val);		}
+    break;
 case 20:
 #line 200 "inform.y"
-{ inform_result = yyvsp[0].val;		;
-    break;}
+{ inform_result = yyvsp[0].val;		}
+    break;
 case 21:
 #line 202 "inform.y"
-{ infix_auto_display(lex_tail()); ;
-    break;}
+{ infix_auto_display(lex_tail()); }
+    break;
 case 22:
 #line 204 "inform.y"
-{ infix_auto_undisplay(yyvsp[0].val.v);	;
-    break;}
+{ infix_auto_undisplay(yyvsp[0].val.v);	}
+    break;
 case 23:
 #line 206 "inform.y"
-{ infix_set_display_enabled(yyvsp[0].val.v, FALSE); ;
-    break;}
+{ infix_set_display_enabled(yyvsp[0].val.v, FALSE); }
+    break;
 case 24:
 #line 208 "inform.y"
-{ infix_set_display_enabled(yyvsp[0].val.v, TRUE); ;
-    break;}
+{ infix_set_display_enabled(yyvsp[0].val.v, TRUE); }
+    break;
 case 25:
 #line 210 "inform.y"
-{ infix_move(yyvsp[0].val.v, yyvsp[-2].val.v); 	;
-    break;}
+{ infix_move(yyvsp[0].val.v, yyvsp[-2].val.v); 	}
+    break;
 case 26:
 #line 212 "inform.y"
-{ infix_object_tree(0);		;
-    break;}
+{ infix_object_tree(0);		}
+    break;
 case 27:
 #line 214 "inform.y"
-{ infix_object_tree(yyvsp[0].val.v);	;
-    break;}
+{ infix_object_tree(yyvsp[0].val.v);	}
+    break;
 case 28:
 #line 216 "inform.y"
 {
 		if(lex_expression[lex_offset])
 		  infix_object_find(lex_tail());
-	;
-    break;}
+	}
+    break;
 case 29:
 #line 221 "inform.y"
 {
@@ -1212,8 +1407,8 @@
 		  infix_print_number(v.v);
 		}
 		infix_print_char(10);
-	;
-    break;}
+	}
+    break;
 case 30:
 #line 239 "inform.y"
 {
@@ -1230,204 +1425,204 @@
 		    }
 		    infix_print_char(10);
 		  }
-		} ;
-    break;}
+		} }
+    break;
 case 31:
 #line 255 "inform.y"
-{ infix_set_attrib(yyvsp[-1].val.v, yyvsp[0].val.v);	;
-    break;}
+{ infix_set_attrib(yyvsp[-1].val.v, yyvsp[0].val.v);	}
+    break;
 case 32:
 #line 257 "inform.y"
-{ infix_clear_attrib(yyvsp[-2].val.v, yyvsp[0].val.v); ;
-    break;}
+{ infix_clear_attrib(yyvsp[-2].val.v, yyvsp[0].val.v); }
+    break;
 case 33:
 #line 259 "inform.y"
-{ infix_remove(yyvsp[0].val.v);		;
-    break;}
+{ infix_remove(yyvsp[0].val.v);		}
+    break;
 case 34:
 #line 261 "inform.y"
-{ PC=yyvsp[0].pcoffset; exit_debugger = TRUE;	;
-    break;}
+{ PC=yyvsp[0].pcoffset; exit_debugger = TRUE;	}
+    break;
 case 35:
 #line 263 "inform.y"
-{ set_step(CONT_GO, 1); ;
-    break;}
+{ set_step(CONT_GO, 1); }
+    break;
 case 36:
 #line 265 "inform.y"
-{ set_step(CONT_GO, 1); infix_set_ignore(cur_break, yyvsp[0].val.v); ;
-    break;}
+{ set_step(CONT_GO, 1); infix_set_ignore(cur_break, yyvsp[0].val.v); }
+    break;
 case 37:
 #line 267 "inform.y"
-{ set_step(CONT_STEP, 1); ;
-    break;}
+{ set_step(CONT_STEP, 1); }
+    break;
 case 38:
 #line 269 "inform.y"
-{ set_step(CONT_STEP, yyvsp[0].val.v); ;
-    break;}
+{ set_step(CONT_STEP, yyvsp[0].val.v); }
+    break;
 case 39:
 #line 271 "inform.y"
-{ set_step(CONT_NEXT, 1); ;
-    break;}
+{ set_step(CONT_NEXT, 1); }
+    break;
 case 40:
 #line 273 "inform.y"
-{ set_step(CONT_NEXT, yyvsp[0].val.v); ;
-    break;}
+{ set_step(CONT_NEXT, yyvsp[0].val.v); }
+    break;
 case 41:
 #line 275 "inform.y"
-{ set_step(CONT_UNTIL, 1); ;
-    break;}
+{ set_step(CONT_UNTIL, 1); }
+    break;
 case 42:
 #line 277 "inform.y"
-{ set_step(CONT_STEPI, 1); ;
-    break;}
+{ set_step(CONT_STEPI, 1); }
+    break;
 case 43:
 #line 279 "inform.y"
-{ set_step(CONT_STEPI, yyvsp[0].val.v); ;
-    break;}
+{ set_step(CONT_STEPI, yyvsp[0].val.v); }
+    break;
 case 44:
 #line 281 "inform.y"
-{ set_step(CONT_NEXTI, 1); ;
-    break;}
+{ set_step(CONT_NEXTI, 1); }
+    break;
 case 45:
 #line 283 "inform.y"
-{ set_step(CONT_NEXTI, yyvsp[0].val.v); ;
-    break;}
+{ set_step(CONT_NEXTI, yyvsp[0].val.v); }
+    break;
 case 46:
 #line 285 "inform.y"
-{ set_step(CONT_FINISH, 1); ;
-    break;}
+{ set_step(CONT_FINISH, 1); }
+    break;
 case 47:
 #line 287 "inform.y"
-{ infix_set_break(yyvsp[0].pcoffset);	;
-    break;}
+{ infix_set_break(yyvsp[0].pcoffset);	}
+    break;
 case 48:
 #line 289 "inform.y"
-{ int n = infix_set_break(yyvsp[-1].pcoffset); infix_set_cond(n, lex_tail()); ;
-    break;}
+{ int n = infix_set_break(yyvsp[-1].pcoffset); infix_set_cond(n, lex_tail()); }
+    break;
 case 49:
 #line 291 "inform.y"
-{ infix_set_cond(yyvsp[0].val.v, lex_tail()); ;
-    break;}
+{ infix_set_cond(yyvsp[0].val.v, lex_tail()); }
+    break;
 case 50:
 #line 293 "inform.y"
-{ infix_set_ignore(yyvsp[-1].val.v, yyvsp[0].val.v);	;
-    break;}
+{ infix_set_ignore(yyvsp[-1].val.v, yyvsp[0].val.v);	}
+    break;
 case 51:
 #line 295 "inform.y"
-{ infix_delete_breakpoint(yyvsp[0].val.v); ;
-    break;}
+{ infix_delete_breakpoint(yyvsp[0].val.v); }
+    break;
 case 52:
 #line 297 "inform.y"
-{ infix_show_all_breakpoints(); ;
-    break;}
+{ infix_show_all_breakpoints(); }
+    break;
 case 53:
 #line 299 "inform.y"
-{ infix_show_breakpoint(yyvsp[0].val.v);	;
-    break;}
+{ infix_show_breakpoint(yyvsp[0].val.v);	}
+    break;
 case 54:
 #line 301 "inform.y"
-{ infix_set_break_enabled(yyvsp[0].val.v, FALSE); ;
-    break;}
+{ infix_set_break_enabled(yyvsp[0].val.v, FALSE); }
+    break;
 case 55:
 #line 303 "inform.y"
-{ infix_set_break_enabled(yyvsp[0].val.v, TRUE); ;
-    break;}
+{ infix_set_break_enabled(yyvsp[0].val.v, TRUE); }
+    break;
 case 56:
 #line 305 "inform.y"
-{ infix_print_string("The current source language is \"inform\".\n"); ;
-    break;}
+{ infix_print_string("The current source language is \"inform\".\n"); }
+    break;
 case 57:
 #line 307 "inform.y"
-{ infix_print_string("Current source file is "); infix_print_string(cur_file->filename); infix_print_string("\nContains "); infix_print_number(cur_file->num_lines); infix_print_string(" lines.\nSource language is inform.\n"); ;
-    break;}
+{ infix_print_string("Current source file is "); infix_print_string(cur_file?cur_file->filename:"unknown"); infix_print_string("\nContains "); infix_print_number(cur_file?cur_file->num_lines:0); infix_print_string(" lines.\nSource language is inform.\n"); }
+    break;
 case 58:
 #line 309 "inform.y"
-{ infix_print_string("Source files for which symbols have been read in:\n\n"); infix_list_files(); infix_print_char('\n'); ;
-    break;}
+{ infix_print_string("Source files for which symbols have been read in:\n\n"); infix_list_files(); infix_print_char('\n'); }
+    break;
 case 59:
 #line 311 "inform.y"
-{ show_copying(); ;
-    break;}
+{ show_copying(); }
+    break;
 case 60:
 #line 313 "inform.y"
-{ show_warranty(); ;
-    break;}
+{ show_warranty(); }
+    break;
 case 61:
 #line 315 "inform.y"
-{ infix_show_frame(infix_selected_frame); ;
-    break;}
+{ infix_show_frame(infix_selected_frame); }
+    break;
 case 62:
 #line 317 "inform.y"
-{ infix_select_frame(yyvsp[0].val.v); infix_show_frame(yyvsp[0].val.v); ;
-    break;}
+{ infix_select_frame(yyvsp[0].val.v); infix_show_frame(yyvsp[0].val.v); }
+    break;
 case 63:
 #line 319 "inform.y"
-{ infix_select_frame(yyvsp[0].val.v); ;
-    break;}
+{ infix_select_frame(yyvsp[0].val.v); }
+    break;
 case 64:
 #line 321 "inform.y"
-{ infix_select_frame(infix_selected_frame - 1); infix_show_frame(infix_selected_frame); ;
-    break;}
+{ infix_select_frame(infix_selected_frame - 1); infix_show_frame(infix_selected_frame); }
+    break;
 case 65:
 #line 323 "inform.y"
-{ infix_select_frame(infix_selected_frame - yyvsp[0].val.v); infix_show_frame(infix_selected_frame); ;
-    break;}
+{ infix_select_frame(infix_selected_frame - yyvsp[0].val.v); infix_show_frame(infix_selected_frame); }
+    break;
 case 66:
 #line 325 "inform.y"
-{ infix_select_frame(infix_selected_frame - 1); ;
-    break;}
+{ infix_select_frame(infix_selected_frame - 1); }
+    break;
 case 67:
 #line 327 "inform.y"
-{ infix_select_frame(infix_selected_frame - yyvsp[0].val.v); ;
-    break;}
+{ infix_select_frame(infix_selected_frame - yyvsp[0].val.v); }
+    break;
 case 68:
 #line 329 "inform.y"
-{ infix_select_frame(infix_selected_frame + 1); infix_show_frame(infix_selected_frame); ;
-    break;}
+{ infix_select_frame(infix_selected_frame + 1); infix_show_frame(infix_selected_frame); }
+    break;
 case 69:
 #line 331 "inform.y"
-{ infix_select_frame(infix_selected_frame + yyvsp[0].val.v); infix_show_frame(infix_selected_frame); ;
-    break;}
+{ infix_select_frame(infix_selected_frame + yyvsp[0].val.v); infix_show_frame(infix_selected_frame); }
+    break;
 case 70:
 #line 333 "inform.y"
-{ infix_select_frame(infix_selected_frame + 1); ;
-    break;}
+{ infix_select_frame(infix_selected_frame + 1); }
+    break;
 case 71:
 #line 335 "inform.y"
-{ infix_select_frame(infix_selected_frame + yyvsp[0].val.v); ;
-    break;}
+{ infix_select_frame(infix_selected_frame + yyvsp[0].val.v); }
+    break;
 case 72:
 #line 337 "inform.y"
-{ infix_backtrace(0, stack_get_depth()); ;
-    break;}
+{ infix_backtrace(0, stack_get_depth()); }
+    break;
 case 73:
 #line 339 "inform.y"
-{ infix_backtrace(stack_get_depth() - yyvsp[0].val.v, yyvsp[0].val.v); ;
-    break;}
+{ infix_backtrace(stack_get_depth() - yyvsp[0].val.v, yyvsp[0].val.v); }
+    break;
 case 74:
 #line 341 "inform.y"
-{ infix_backtrace(0, yyvsp[0].val.v); ;
-    break;}
+{ infix_backtrace(0, yyvsp[0].val.v); }
+    break;
 case 75:
 #line 349 "inform.y"
-{ if(yyvsp[0].val.t == Z_ROUTINE) yyval.pcoffset = infix_get_routine_PC(yyvsp[0].val.v); else { infix_location l; infix_decode_fileloc(&l, cur_file->filename, yyvsp[0].val.v); yyval.pcoffset = l.thisPC; } ;
-    break;}
+{ if(yyvsp[0].val.t == Z_ROUTINE) yyval.pcoffset = infix_get_routine_PC(yyvsp[0].val.v); else { infix_location l; infix_decode_fileloc(&l, cur_file?cur_file->filename:"", yyvsp[0].val.v); yyval.pcoffset = l.thisPC; } }
+    break;
 case 76:
 #line 350 "inform.y"
-{ infix_location l; infix_decode_fileloc(&l, cur_file->filename, cur_line + yyvsp[0].val.v); yyval.pcoffset = l.thisPC; ;
-    break;}
+{ infix_location l; infix_decode_fileloc(&l, cur_file?cur_file->filename:"", cur_line + yyvsp[0].val.v); yyval.pcoffset = l.thisPC; }
+    break;
 case 77:
 #line 351 "inform.y"
-{ infix_location l; infix_decode_fileloc(&l, cur_file->filename, cur_line - yyvsp[0].val.v); yyval.pcoffset = l.thisPC; ;
-    break;}
+{ infix_location l; infix_decode_fileloc(&l, cur_file?cur_file->filename:"", cur_line - yyvsp[0].val.v); yyval.pcoffset = l.thisPC; }
+    break;
 case 78:
 #line 352 "inform.y"
-{ if(yyvsp[0].val.t == Z_ROUTINE) yyval.pcoffset = UNPACKR(yyvsp[0].val.v); else { infix_location l; infix_decode_fileloc(&l, yyvsp[-2].filenum->filename, yyvsp[0].val.v); yyval.pcoffset = l.thisPC; } ;
-    break;}
+{ if(yyvsp[0].val.t == Z_ROUTINE) yyval.pcoffset = UNPACKR(yyvsp[0].val.v); else { infix_location l; infix_decode_fileloc(&l, yyvsp[-2].filenum->filename, yyvsp[0].val.v); yyval.pcoffset = l.thisPC; } }
+    break;
 case 79:
 #line 353 "inform.y"
-{ yyval.pcoffset = yyvsp[0].val.v;			;
-    break;}
+{ yyval.pcoffset = yyvsp[0].val.v;			}
+    break;
 case 80:
 #line 357 "inform.y"
 {
@@ -1436,8 +1631,8 @@
 		   ignoreeffects++;
 		} else
 		   yyval.flag = FALSE;
-	    ;
-    break;}
+	    }
+    break;
 case 81:
 #line 364 "inform.y"
 {
@@ -1449,70 +1644,70 @@
 		    ignoreeffects++;
 		  }
 		  else yyval.flag = FALSE;
-		} ;
-    break;}
+		} }
+    break;
 case 82:
 #line 377 "inform.y"
-{ yyval.zlist = NULL; ;
-    break;}
+{ yyval.zlist = NULL; }
+    break;
 case 83:
 #line 378 "inform.y"
-{ zword_list g; yyval.zlist = yyvsp[0].zlist; g.item = yyvsp[-2].val.v; LEaddm(yyval.zlist, g, n_rmmalloc); ;
-    break;}
+{ zword_list g; yyval.zlist = yyvsp[0].zlist; g.item = yyvsp[-2].val.v; LEaddm(yyval.zlist, g, n_rmmalloc); }
+    break;
 case 86:
 #line 384 "inform.y"
-{ yyval.val = yyvsp[0].val;			;
-    break;}
+{ yyval.val = yyvsp[0].val;			}
+    break;
 case 87:
 #line 385 "inform.y"
-{ yyval.val = yyvsp[0].val;			;
-    break;}
+{ yyval.val = yyvsp[0].val;			}
+    break;
 case 88:
 #line 390 "inform.y"
-{ cond_list newcond; newcond.val = yyvsp[-1].val.v; newcond.condfunc = yyvsp[0].cond.condfunc; newcond.opposite = yyvsp[0].cond.opposite; LEaddm(condlist, newcond, n_rmmalloc); ;
-    break;}
+{ cond_list newcond; newcond.val = yyvsp[-1].val.v; newcond.condfunc = yyvsp[0].cond.condfunc; newcond.opposite = yyvsp[0].cond.opposite; LEaddm(condlist, newcond, n_rmmalloc); }
+    break;
 case 89:
 #line 390 "inform.y"
-{ if(yyvsp[0].flag) ignoreeffects--; yyval.val.v = yyvsp[0].flag; yyval.val.t = Z_BOOLEAN; LEremovem(condlist, n_rmfreeone); ;
-    break;}
+{ if(yyvsp[0].flag) ignoreeffects--; yyval.val.v = yyvsp[0].flag; yyval.val.t = Z_BOOLEAN; LEremovem(condlist, n_rmfreeone); }
+    break;
 case 90:
-#line 394 "inform.y"
-{ yyval.val = yyvsp[0].val;				;
-    break;}
+#line 395 "inform.y"
+{ yyval.val = yyvsp[0].val;				}
+    break;
 case 91:
-#line 396 "inform.y"
-{ yyval.val.v = 0; yyval.val.t = Z_BOOLEAN;		;
-    break;}
+#line 397 "inform.y"
+{ yyval.val.v = 0; yyval.val.t = Z_BOOLEAN;		}
+    break;
 case 92:
-#line 398 "inform.y"
-{ yyval.val.v = 1; yyval.val.t = Z_BOOLEAN;		;
-    break;}
+#line 399 "inform.y"
+{ yyval.val.v = 1; yyval.val.t = Z_BOOLEAN;		}
+    break;
 case 93:
-#line 400 "inform.y"
-{ yyval.val.v = 0; yyval.val.t = Z_OBJECT;		;
-    break;}
+#line 401 "inform.y"
+{ yyval.val.v = 0; yyval.val.t = Z_OBJECT;		}
+    break;
 case 94:
-#line 403 "inform.y"
-{ yyval.val = yyvsp[0].val; infix_assign(&yyvsp[-2].val, yyvsp[0].val.v);	;
-    break;}
+#line 404 "inform.y"
+{ yyval.val = yyvsp[0].val; infix_assign(&yyvsp[-2].val, yyvsp[0].val.v);	}
+    break;
 case 95:
-#line 406 "inform.y"
-{ yyval.val.v = infix_parent(yyvsp[-1].val.v); yyval.val.t = Z_OBJECT; ;
-    break;}
+#line 407 "inform.y"
+{ yyval.val.v = infix_parent(yyvsp[-1].val.v); yyval.val.t = Z_OBJECT; }
+    break;
 case 96:
-#line 408 "inform.y"
-{ yyval.val.v = infix_child(yyvsp[-1].val.v); yyval.val.t = Z_OBJECT; ;
-    break;}
+#line 409 "inform.y"
+{ yyval.val.v = infix_child(yyvsp[-1].val.v); yyval.val.t = Z_OBJECT; }
+    break;
 case 97:
-#line 410 "inform.y"
-{ yyval.val.v = infix_sibling(yyvsp[-1].val.v); yyval.val.t = Z_OBJECT; ;
-    break;}
+#line 411 "inform.y"
+{ yyval.val.v = infix_sibling(yyvsp[-1].val.v); yyval.val.t = Z_OBJECT; }
+    break;
 case 98:
-#line 412 "inform.y"
-{ int n = 0; zword o = infix_child(yyvsp[-1].val.v); while(o) { n++; o = infix_sibling(o); } yyval.val.v = n; yyval.val.t = Z_NUMBER; ;
-    break;}
+#line 413 "inform.y"
+{ int n = 0; zword o = infix_child(yyvsp[-1].val.v); while(o) { n++; o = infix_sibling(o); } yyval.val.v = n; yyval.val.t = Z_NUMBER; }
+    break;
 case 99:
-#line 415 "inform.y"
+#line 416 "inform.y"
 {
 		  if(!ignoreeffects) {
 		    yyval.val.v = z_random(yyvsp[-1].val.v);
@@ -1521,10 +1716,10 @@
 		    yyval.val.v = 0;
 		    yyval.val.t = Z_UNKNOWN;
 		  }
-		;
-    break;}
+		}
+    break;
 case 100:
-#line 425 "inform.y"
+#line 426 "inform.y"
 {
 		zword locals[16];
 		int i = 0;
@@ -1540,172 +1735,158 @@
 		} else {
 		  yyval.val.v = 0; yyval.val.t = Z_UNKNOWN;
 		}
-	      ;
-    break;}
+	      }
+    break;
 case 101:
-#line 442 "inform.y"
-{ if(yyvsp[-1].val.v == 0) ignoreeffects++; ;
-    break;}
-case 102:
 #line 443 "inform.y"
-{ if(yyvsp[-3].val.v == 0) ignoreeffects--; yyval.val = z_t(yyvsp[-3].val, yyvsp[0].val, yyvsp[-3].val.v && yyvsp[0].val.v);	;
-    break;}
-case 103:
+{ if(yyvsp[-1].val.v == 0) ignoreeffects++; }
+    break;
+case 102:
 #line 444 "inform.y"
-{ if(yyvsp[-1].val.v != 0) ignoreeffects++; ;
-    break;}
-case 104:
+{ if(yyvsp[-3].val.v == 0) ignoreeffects--; yyval.val = z_t(yyvsp[-3].val, yyvsp[0].val, yyvsp[-3].val.v && yyvsp[0].val.v);	}
+    break;
+case 103:
 #line 445 "inform.y"
-{ if(yyvsp[-3].val.v != 0) ignoreeffects--; yyval.val = z_t(yyvsp[-3].val, yyvsp[0].val, yyvsp[-3].val.v || yyvsp[0].val.v);	;
-    break;}
+{ if(yyvsp[-1].val.v != 0) ignoreeffects++; }
+    break;
+case 104:
+#line 446 "inform.y"
+{ if(yyvsp[-3].val.v != 0) ignoreeffects--; yyval.val = z_t(yyvsp[-3].val, yyvsp[0].val, yyvsp[-3].val.v || yyvsp[0].val.v);	}
+    break;
 case 105:
-#line 447 "inform.y"
-{ yyval.val.v = !(yyvsp[0].val.v); yyval.val.t = Z_NUMBER;	;
-    break;}
+#line 448 "inform.y"
+{ yyval.val.v = !(yyvsp[0].val.v); yyval.val.t = Z_NUMBER;	}
+    break;
 case 106:
-#line 450 "inform.y"
-{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, yyvsp[-2].val.v + yyvsp[0].val.v);	;
-    break;}
+#line 451 "inform.y"
+{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, yyvsp[-2].val.v + yyvsp[0].val.v);	}
+    break;
 case 107:
-#line 452 "inform.y"
-{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, yyvsp[-2].val.v + neg(yyvsp[0].val.v));	;
-    break;}
+#line 453 "inform.y"
+{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, yyvsp[-2].val.v + neg(yyvsp[0].val.v));	}
+    break;
 case 108:
-#line 454 "inform.y"
-{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, z_mult(yyvsp[-2].val.v, yyvsp[0].val.v));	;
-    break;}
+#line 455 "inform.y"
+{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, z_mult(yyvsp[-2].val.v, yyvsp[0].val.v));	}
+    break;
 case 109:
-#line 456 "inform.y"
-{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, z_div(yyvsp[-2].val.v, yyvsp[0].val.v));	;
-    break;}
+#line 457 "inform.y"
+{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, z_div(yyvsp[-2].val.v, yyvsp[0].val.v));	}
+    break;
 case 110:
-#line 458 "inform.y"
-{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, z_mod(yyvsp[-2].val.v, yyvsp[0].val.v));	;
-    break;}
+#line 459 "inform.y"
+{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, z_mod(yyvsp[-2].val.v, yyvsp[0].val.v));	}
+    break;
 case 111:
-#line 460 "inform.y"
-{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, yyvsp[-2].val.v & yyvsp[0].val.v);	;
-    break;}
+#line 461 "inform.y"
+{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, yyvsp[-2].val.v & yyvsp[0].val.v);	}
+    break;
 case 112:
-#line 462 "inform.y"
-{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, yyvsp[-2].val.v | yyvsp[0].val.v);	;
-    break;}
+#line 463 "inform.y"
+{ yyval.val = z_t(yyvsp[-2].val, yyvsp[0].val, yyvsp[-2].val.v | yyvsp[0].val.v);	}
+    break;
 case 113:
-#line 464 "inform.y"
-{ yyval.val = z_t(yyvsp[0].val, yyvsp[0].val, ~yyvsp[0].val.v);		;
-    break;}
+#line 465 "inform.y"
+{ yyval.val = z_t(yyvsp[0].val, yyvsp[0].val, ~yyvsp[0].val.v);		}
+    break;
 case 114:
-#line 467 "inform.y"
-{ yyval.val.t = Z_BYTEARRAY; yyval.val.o = yyvsp[-2].val.v; yyval.val.p = yyvsp[0].val.v; infix_get_val(&yyval.val); ;
-    break;}
+#line 468 "inform.y"
+{ yyval.val.t = Z_BYTEARRAY; yyval.val.o = yyvsp[-2].val.v; yyval.val.p = yyvsp[0].val.v; infix_get_val(&yyval.val); }
+    break;
 case 115:
-#line 469 "inform.y"
-{ yyval.val.t = Z_WORDARRAY; yyval.val.o = yyvsp[-2].val.v; yyval.val.p = yyvsp[0].val.v; infix_get_val(&yyval.val);	;
-    break;}
+#line 470 "inform.y"
+{ yyval.val.t = Z_WORDARRAY; yyval.val.o = yyvsp[-2].val.v; yyval.val.p = yyvsp[0].val.v; infix_get_val(&yyval.val);	}
+    break;
 case 116:
-#line 472 "inform.y"
-{ yyval.val = z_t(yyvsp[0].val, yyvsp[0].val, neg(yyvsp[0].val.v));		;
-    break;}
+#line 473 "inform.y"
+{ yyval.val = z_t(yyvsp[0].val, yyvsp[0].val, neg(yyvsp[0].val.v));		}
+    break;
 case 117:
-#line 475 "inform.y"
-{ if(!ignoreeffects) infix_assign(&yyvsp[0].val, ARITHMASK(yyvsp[0].val.v + 1)); yyval.val = yyvsp[0].val; ;
-    break;}
+#line 476 "inform.y"
+{ if(!ignoreeffects) infix_assign(&yyvsp[0].val, ARITHMASK(yyvsp[0].val.v + 1)); yyval.val = yyvsp[0].val; }
+    break;
 case 118:
-#line 477 "inform.y"
-{ yyval.val = yyvsp[-1].val; if(!ignoreeffects) infix_assign(&yyvsp[-1].val, ARITHMASK(yyvsp[-1].val.v + 1)); ;
-    break;}
+#line 478 "inform.y"
+{ yyval.val = yyvsp[-1].val; if(!ignoreeffects) infix_assign(&yyvsp[-1].val, ARITHMASK(yyvsp[-1].val.v + 1)); }
+    break;
 case 119:
-#line 479 "inform.y"
-{ if(!ignoreeffects) infix_assign(&yyvsp[0].val, ARITHMASK(yyvsp[0].val.v + neg(1))); yyval.val = yyvsp[0].val; ;
-    break;}
+#line 480 "inform.y"
+{ if(!ignoreeffects) infix_assign(&yyvsp[0].val, ARITHMASK(yyvsp[0].val.v + neg(1))); yyval.val = yyvsp[0].val; }
+    break;
 case 120:
-#line 481 "inform.y"
-{ yyval.val = yyvsp[-1].val; if(!ignoreeffects) infix_assign(&yyvsp[-1].val, ARITHMASK(yyvsp[-1].val.v + neg(1))); ;
-    break;}
+#line 482 "inform.y"
+{ yyval.val = yyvsp[-1].val; if(!ignoreeffects) infix_assign(&yyvsp[-1].val, ARITHMASK(yyvsp[-1].val.v + neg(1))); }
+    break;
 case 121:
-#line 484 "inform.y"
-{ zword len; yyval.val.v = infix_get_proptable(yyvsp[-2].val.v, yyvsp[0].val.v, &len); yyval.val.t = Z_NUMBER; ;
-    break;}
+#line 485 "inform.y"
+{ zword len; yyval.val.v = infix_get_proptable(yyvsp[-2].val.v, yyvsp[0].val.v, &len); yyval.val.t = Z_NUMBER; }
+    break;
 case 122:
-#line 486 "inform.y"
-{ infix_get_proptable(yyvsp[-2].val.v, yyvsp[0].val.v, &yyval.val.v); yyval.val.t = Z_NUMBER; ;
-    break;}
+#line 487 "inform.y"
+{ infix_get_proptable(yyvsp[-2].val.v, yyvsp[0].val.v, &yyval.val.v); yyval.val.t = Z_NUMBER; }
+    break;
 case 123:
-#line 489 "inform.y"
-{ yyval.val.t = Z_OBJPROP; yyval.val.o = yyvsp[-2].val.v; yyval.val.p = yyvsp[0].val.v; infix_get_val(&yyval.val); ;
-    break;}
+#line 490 "inform.y"
+{ yyval.val.t = Z_OBJPROP; yyval.val.o = yyvsp[-2].val.v; yyval.val.p = yyvsp[0].val.v; infix_get_val(&yyval.val); }
+    break;
 case 124:
-#line 497 "inform.y"
-{ yyval.val.v = yyvsp[0].val.v; yyval.val.t = Z_NUMBER;		;
-    break;}
+#line 498 "inform.y"
+{ yyval.val.v = yyvsp[0].val.v; yyval.val.t = Z_NUMBER;		}
+    break;
 case 125:
-#line 499 "inform.y"
-{ yyval.val.v = yyvsp[0].val.v; yyval.val.t = Z_OBJECT;		;
-    break;}
+#line 500 "inform.y"
+{ yyval.val.v = yyvsp[0].val.v; yyval.val.t = Z_OBJECT;		}
+    break;
 case 126:
-#line 501 "inform.y"
-{ yyval.val.v = yyvsp[0].val.v; yyval.val.t = Z_ROUTINE;	;
-    break;}
+#line 502 "inform.y"
+{ yyval.val.v = yyvsp[0].val.v; yyval.val.t = Z_ROUTINE;	}
+    break;
 case 127:
-#line 503 "inform.y"
-{ yyval.val.v = yyvsp[0].val.v; yyval.val.t = Z_STRING;		;
-    break;}
+#line 504 "inform.y"
+{ yyval.val.v = yyvsp[0].val.v; yyval.val.t = Z_STRING;		}
+    break;
 case 128:
-#line 505 "inform.y"
-{ yyval.val.t = Z_WORDARRAY; yyval.val.o = z_globaltable; yyval.val.p = yyvsp[0].val.v; infix_get_val(&yyval.val); ;
-    break;}
+#line 506 "inform.y"
+{ yyval.val.t = Z_WORDARRAY; yyval.val.o = z_globaltable; yyval.val.p = yyvsp[0].val.v; infix_get_val(&yyval.val); }
+    break;
 case 129:
-#line 507 "inform.y"
-{ yyval.val.t = Z_LOCAL; yyval.val.o = infix_selected_frame; yyval.val.p = yyvsp[0].val.v; infix_get_val(&yyval.val); ;
-    break;}
+#line 508 "inform.y"
+{ yyval.val.t = Z_LOCAL; yyval.val.o = infix_selected_frame; yyval.val.p = yyvsp[0].val.v; infix_get_val(&yyval.val); }
+    break;
 case 130:
-#line 509 "inform.y"
-{ yyval.val = yyvsp[-1].val;				;
-    break;}
+#line 510 "inform.y"
+{ yyval.val = yyvsp[-1].val;				}
+    break;
 }
-   /* the action file gets copied in in place of this dollarsign */
-#line 543 "/usr/local/share/bison.simple"
+
+#line 705 "/usr/share/bison/bison.simple"
+
 
   yyvsp -= yylen;
   yyssp -= yylen;
-#ifdef YYLSP_NEEDED
+#if YYLSP_NEEDED
   yylsp -= yylen;
 #endif
 
-#if YYDEBUG != 0
+#if YYDEBUG
   if (yydebug)
     {
-      short *ssp1 = yyss - 1;
-      fprintf (stderr, "state stack now");
-      while (ssp1 != yyssp)
-	fprintf (stderr, " %d", *++ssp1);
-      fprintf (stderr, "\n");
+      short *yyssp1 = yyss - 1;
+      YYFPRINTF (stderr, "state stack now");
+      while (yyssp1 != yyssp)
+	YYFPRINTF (stderr, " %d", *++yyssp1);
+      YYFPRINTF (stderr, "\n");
     }
 #endif
 
   *++yyvsp = yyval;
-
-#ifdef YYLSP_NEEDED
-  yylsp++;
-  if (yylen == 0)
-    {
-      yylsp->first_line = yylloc.first_line;
-      yylsp->first_column = yylloc.first_column;
-      yylsp->last_line = (yylsp-1)->last_line;
-      yylsp->last_column = (yylsp-1)->last_column;
-      yylsp->text = 0;
-    }
-  else
-    {
-      yylsp->last_line = (yylsp+yylen-1)->last_line;
-      yylsp->last_column = (yylsp+yylen-1)->last_column;
-    }
+#if YYLSP_NEEDED
+  *++yylsp = yyloc;
 #endif
 
-  /* Now "shift" the result of the reduction.
-     Determine what state that goes to,
-     based on the state we popped back to
-     and the rule number reduced by.  */
+  /* Now `shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
 
   yyn = yyr1[yyn];
 
@@ -1717,10 +1898,13 @@
 
   goto yynewstate;
 
-yyerrlab:   /* here on detecting error */
 
-  if (! yyerrstatus)
-    /* If not already recovering from an error, report this error.  */
+/*------------------------------------.
+| yyerrlab -- here on detecting error |
+`------------------------------------*/
+yyerrlab:
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
     {
       ++yynerrs;
 
@@ -1729,102 +1913,121 @@
 
       if (yyn > YYFLAG && yyn < YYLAST)
 	{
-	  int size = 0;
-	  char *msg;
-	  int x, count;
-
-	  count = 0;
-	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
-	  for (x = (yyn < 0 ? -yyn : 0);
-	       x < (sizeof(yytname) / sizeof(char *)); x++)
-	    if (yycheck[x + yyn] == x)
-	      size += strlen(yytname[x]) + 15, count++;
-	  msg = (char *) malloc(size + 15);
-	  if (msg != 0)
+	  YYSIZE_T yysize = 0;
+	  char *yymsg;
+	  int yyx, yycount;
+
+	  yycount = 0;
+	  /* Start YYX at -YYN if negative to avoid negative indexes in
+	     YYCHECK.  */
+	  for (yyx = yyn < 0 ? -yyn : 0;
+	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
+	    if (yycheck[yyx + yyn] == yyx)
+	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
+	  yysize += yystrlen ("parse error, unexpected ") + 1;
+	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
+	  yymsg = (char *) YYSTACK_ALLOC (yysize);
+	  if (yymsg != 0)
 	    {
-	      strcpy(msg, "parse error");
+	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
+	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
 
-	      if (count < 5)
+	      if (yycount < 5)
 		{
-		  count = 0;
-		  for (x = (yyn < 0 ? -yyn : 0);
-		       x < (sizeof(yytname) / sizeof(char *)); x++)
-		    if (yycheck[x + yyn] == x)
+		  yycount = 0;
+		  for (yyx = yyn < 0 ? -yyn : 0;
+		       yyx < (int) (sizeof (yytname) / sizeof (char *));
+		       yyx++)
+		    if (yycheck[yyx + yyn] == yyx)
 		      {
-			strcat(msg, count == 0 ? ", expecting `" : " or `");
-			strcat(msg, yytname[x]);
-			strcat(msg, "'");
-			count++;
+			const char *yyq = ! yycount ? ", expecting " : " or ";
+			yyp = yystpcpy (yyp, yyq);
+			yyp = yystpcpy (yyp, yytname[yyx]);
+			yycount++;
 		      }
 		}
-	      yyerror(msg);
-	      free(msg);
+	      yyerror (yymsg);
+	      YYSTACK_FREE (yymsg);
 	    }
 	  else
-	    yyerror ("parse error; also virtual memory exceeded");
+	    yyerror ("parse error; also virtual memory exhausted");
 	}
       else
-#endif /* YYERROR_VERBOSE */
-	yyerror("parse error");
+#endif /* defined (YYERROR_VERBOSE) */
+	yyerror ("parse error");
     }
-
   goto yyerrlab1;
-yyerrlab1:   /* here on error raised explicitly by an action */
 
+
+/*--------------------------------------------------.
+| yyerrlab1 -- error raised explicitly by an action |
+`--------------------------------------------------*/
+yyerrlab1:
   if (yyerrstatus == 3)
     {
-      /* if just tried and failed to reuse lookahead token after an error, discard it.  */
+      /* If just tried and failed to reuse lookahead token after an
+	 error, discard it.  */
 
       /* return failure if at end of input */
       if (yychar == YYEOF)
 	YYABORT;
-
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
-#endif
-
+      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
+		  yychar, yytname[yychar1]));
       yychar = YYEMPTY;
     }
 
-  /* Else will try to reuse lookahead token
-     after shifting the error token.  */
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
 
   yyerrstatus = 3;		/* Each real token shifted decrements this */
 
   goto yyerrhandle;
 
-yyerrdefault:  /* current state does not do anything special for the error token. */
 
+/*-------------------------------------------------------------------.
+| yyerrdefault -- current state does not do anything special for the |
+| error token.                                                       |
+`-------------------------------------------------------------------*/
+yyerrdefault:
 #if 0
   /* This is wrong; only states that explicitly want error tokens
      should shift them.  */
-  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
-  if (yyn) goto yydefault;
+
+  /* If its default is to accept any token, ok.  Otherwise pop it.  */
+  yyn = yydefact[yystate];
+  if (yyn)
+    goto yydefault;
 #endif
 
-yyerrpop:   /* pop the current state because it cannot handle the error token */
 
-  if (yyssp == yyss) YYABORT;
+/*---------------------------------------------------------------.
+| yyerrpop -- pop the current state because it cannot handle the |
+| error token                                                    |
+`---------------------------------------------------------------*/
+yyerrpop:
+  if (yyssp == yyss)
+    YYABORT;
   yyvsp--;
   yystate = *--yyssp;
-#ifdef YYLSP_NEEDED
+#if YYLSP_NEEDED
   yylsp--;
 #endif
 
-#if YYDEBUG != 0
+#if YYDEBUG
   if (yydebug)
     {
-      short *ssp1 = yyss - 1;
-      fprintf (stderr, "Error: state stack now");
-      while (ssp1 != yyssp)
-	fprintf (stderr, " %d", *++ssp1);
-      fprintf (stderr, "\n");
+      short *yyssp1 = yyss - 1;
+      YYFPRINTF (stderr, "Error: state stack now");
+      while (yyssp1 != yyssp)
+	YYFPRINTF (stderr, " %d", *++yyssp1);
+      YYFPRINTF (stderr, "\n");
     }
 #endif
 
+/*--------------.
+| yyerrhandle.  |
+`--------------*/
 yyerrhandle:
-
   yyn = yypact[yystate];
   if (yyn == YYFLAG)
     goto yyerrdefault;
@@ -1847,44 +2050,47 @@
   if (yyn == YYFINAL)
     YYACCEPT;
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Shifting error token, ");
-#endif
+  YYDPRINTF ((stderr, "Shifting error token, "));
 
   *++yyvsp = yylval;
-#ifdef YYLSP_NEEDED
+#if YYLSP_NEEDED
   *++yylsp = yylloc;
 #endif
 
   yystate = yyn;
   goto yynewstate;
 
- yyacceptlab:
-  /* YYACCEPT comes here.  */
-  if (yyfree_stacks)
-    {
-      free (yyss);
-      free (yyvs);
-#ifdef YYLSP_NEEDED
-      free (yyls);
-#endif
-    }
-  return 0;
 
- yyabortlab:
-  /* YYABORT comes here.  */
-  if (yyfree_stacks)
-    {
-      free (yyss);
-      free (yyvs);
-#ifdef YYLSP_NEEDED
-      free (yyls);
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+/*---------------------------------------------.
+| yyoverflowab -- parser overflow comes here.  |
+`---------------------------------------------*/
+yyoverflowlab:
+  yyerror ("parser stack overflow");
+  yyresult = 2;
+  /* Fall through.  */
+
+yyreturn:
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
 #endif
-    }
-  return 1;
+  return yyresult;
 }
-#line 513 "inform.y"
+#line 514 "inform.y"
 
 
 #if 0
@@ -2263,7 +2469,7 @@
 
 void process_debug_command(const char *buffer)
 {
-#ifdef YYDEBUG
+#if YYDEBUG
   yydebug = 1;
 #endif
   lex_expression = buffer;
diff -Naur nitfol/nitfol-0.5/inform.y nitfol_new/nitfol-0.5/inform.y
--- nitfol/nitfol-0.5/inform.y	Sun Oct 24 17:37:17 1999
+++ nitfol_new/nitfol-0.5/inform.y	Sat Mar  1 22:59:52 2003
@@ -304,7 +304,7 @@
 /* :: Show the current source language. */
 	| LANGUAGE		{ infix_print_string("The current source language is \"inform\".\n"); }
 /* :: Get information on the current source file. */
-	| INFOSOURCE		{ infix_print_string("Current source file is "); infix_print_string(cur_file->filename); infix_print_string("\nContains "); infix_print_number(cur_file->num_lines); infix_print_string(" lines.\nSource language is inform.\n"); }
+	| INFOSOURCE		{ infix_print_string("Current source file is "); infix_print_string(cur_file?cur_file->filename:"unknown"); infix_print_string("\nContains "); infix_print_number(cur_file?cur_file->num_lines:0); infix_print_string(" lines.\nSource language is inform.\n"); }
 /* :: List source files. */
 	| INFOSOURCES		{ infix_print_string("Source files for which symbols have been read in:\n\n"); infix_list_files(); infix_print_char('\n'); }
 /* :: Show licensing information. */
@@ -346,9 +346,9 @@
 */
 ;
 
-linespec: NUM			{ if($1.t == Z_ROUTINE) $$ = infix_get_routine_PC($1.v); else { infix_location l; infix_decode_fileloc(&l, cur_file->filename, $1.v); $$ = l.thisPC; } }
-	| '+' NUM		{ infix_location l; infix_decode_fileloc(&l, cur_file->filename, cur_line + $2.v); $$ = l.thisPC; }
-	| '-' NUM		{ infix_location l; infix_decode_fileloc(&l, cur_file->filename, cur_line - $2.v); $$ = l.thisPC; }
+linespec: NUM			{ if($1.t == Z_ROUTINE) $$ = infix_get_routine_PC($1.v); else { infix_location l; infix_decode_fileloc(&l, cur_file?cur_file->filename:"", $1.v); $$ = l.thisPC; } }
+	| '+' NUM		{ infix_location l; infix_decode_fileloc(&l, cur_file?cur_file->filename:"", cur_line + $2.v); $$ = l.thisPC; }
+	| '-' NUM		{ infix_location l; infix_decode_fileloc(&l, cur_file?cur_file->filename:"", cur_line - $2.v); $$ = l.thisPC; }
 	| DFILE ':' NUM		{ if($3.t == Z_ROUTINE) $$ = UNPACKR($3.v); else { infix_location l; infix_decode_fileloc(&l, $1->filename, $3.v); $$ = l.thisPC; } }
 	| '*' NUM		{ $$ = $2.v;			}
 ;
@@ -388,6 +388,7 @@
 /* Expressions with conditions */
 condexp:
 	exp CONDITION { cond_list newcond; newcond.val = $1.v; newcond.condfunc = $2.condfunc; newcond.opposite = $2.opposite; LEaddm(condlist, newcond, n_rmmalloc); } orlist { if($4) ignoreeffects--; $$.v = $4; $$.t = Z_BOOLEAN; LEremovem(condlist, n_rmfreeone); }
+;
 
 /* Expressions without commas */
 exp:	  NUM
